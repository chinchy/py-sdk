# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401

from typing_extensions import Annotated

from pydantic import Field, StrictStr, confloat, conlist, validator

from typing import Optional

from fireblocks_client.models.get_nft_tokens200_response import GetNFTTokens200Response
from fireblocks_client.models.get_ownership_tokens200_response import GetOwnershipTokens200Response
from fireblocks_client.models.token_response import TokenResponse
from fireblocks_client.models.update_token_ownership_status_dto import UpdateTokenOwnershipStatusDto

from fireblocks_client.api_client import ApiClient
from fireblocks_client.api_client import Configuration
from fireblocks_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)
from pydantic import validate_arguments



class NFTsBetaApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, configuration:Configuration=None):
        if configuration is None:
            api_client = ApiClient()
        else:
            api_client = ApiClient(configuration)
        self.api_client = api_client

    @validate_arguments
    def get_nft_token_by_id(self, id : Annotated[StrictStr, Field(..., description="NFT ID")], **kwargs) -> TokenResponse:  # noqa: E501
        """List token data by ID  # noqa: E501

        Returns the requested token data.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_nft_token_by_id(id, async_req=True)
        >>> result = thread.get()

        :param id: NFT ID (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TokenResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_nft_token_by_id_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_nft_token_by_id_with_http_info(self, id : Annotated[StrictStr, Field(..., description="NFT ID")], **kwargs):  # noqa: E501
        """List token data by ID  # noqa: E501

        Returns the requested token data.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_nft_token_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: NFT ID (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TokenResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nft_token_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "TokenResponse",
        }

        return self.api_client.call_api(
            '/nfts/tokens/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_nft_tokens(self, ids : Annotated[StrictStr, Field(..., description="A comma separated list of NFT IDs. Up to 100 are allowed in a single request.")], page_cursor : Annotated[Optional[StrictStr], Field(description="Page cursor to fetch")] = None, page_size : Annotated[Optional[confloat(ge=100, le=1, strict=True)], Field(description="Items per page (max 100)")] = None, sort : Annotated[Optional[conlist(StrictStr)], Field(description="Sort by param, it can be one param or a list of params separated by comma")] = None, order : Annotated[Optional[StrictStr], Field(description="Order direction, it can be `ASC` for ascending or `DESC` for descending")] = None, **kwargs) -> GetNFTTokens200Response:  # noqa: E501
        """List tokens by IDs  # noqa: E501

        Returns the requested tokens data  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_nft_tokens(ids, page_cursor, page_size, sort, order, async_req=True)
        >>> result = thread.get()

        :param ids: A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (required)
        :type ids: str
        :param page_cursor: Page cursor to fetch
        :type page_cursor: str
        :param page_size: Items per page (max 100)
        :type page_size: float
        :param sort: Sort by param, it can be one param or a list of params separated by comma
        :type sort: List[str]
        :param order: Order direction, it can be `ASC` for ascending or `DESC` for descending
        :type order: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetNFTTokens200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_nft_tokens_with_http_info(ids, page_cursor, page_size, sort, order, **kwargs)  # noqa: E501

    @validate_arguments
    def get_nft_tokens_with_http_info(self, ids : Annotated[StrictStr, Field(..., description="A comma separated list of NFT IDs. Up to 100 are allowed in a single request.")], page_cursor : Annotated[Optional[StrictStr], Field(description="Page cursor to fetch")] = None, page_size : Annotated[Optional[confloat(ge=100, le=1, strict=True)], Field(description="Items per page (max 100)")] = None, sort : Annotated[Optional[conlist(StrictStr)], Field(description="Sort by param, it can be one param or a list of params separated by comma")] = None, order : Annotated[Optional[StrictStr], Field(description="Order direction, it can be `ASC` for ascending or `DESC` for descending")] = None, **kwargs):  # noqa: E501
        """List tokens by IDs  # noqa: E501

        Returns the requested tokens data  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_nft_tokens_with_http_info(ids, page_cursor, page_size, sort, order, async_req=True)
        >>> result = thread.get()

        :param ids: A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (required)
        :type ids: str
        :param page_cursor: Page cursor to fetch
        :type page_cursor: str
        :param page_size: Items per page (max 100)
        :type page_size: float
        :param sort: Sort by param, it can be one param or a list of params separated by comma
        :type sort: List[str]
        :param order: Order direction, it can be `ASC` for ascending or `DESC` for descending
        :type order: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetNFTTokens200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ids',
            'page_cursor',
            'page_size',
            'sort',
            'order'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nft_tokens" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('ids') is not None:  # noqa: E501
            _query_params.append(('ids', _params['ids']))

        if _params.get('page_cursor') is not None:  # noqa: E501
            _query_params.append(('pageCursor', _params['page_cursor']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))
            _collection_formats['sort'] = 'multi'

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GetNFTTokens200Response",
        }

        return self.api_client.call_api(
            '/nfts/tokens', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_ownership_tokens(self, blockchain_descriptor : Annotated[Optional[StrictStr], Field(description="Blockchain descriptor filter")] = None, vault_account_ids : Annotated[Optional[StrictStr], Field(description="A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request")] = None, ids : Annotated[Optional[StrictStr], Field(description="A comma separated list of NFT IDs. Up to 100 are allowed in a single request.")] = None, collection_ids : Annotated[Optional[StrictStr], Field(description="A comma separated list of collection IDs. Up to 100 are allowed in a single request.")] = None, page_cursor : Annotated[Optional[StrictStr], Field(description="Page cursor to fetch")] = None, page_size : Annotated[Optional[confloat(ge=100, le=1, strict=True)], Field(description="Items per page (max 100)")] = None, sort : Annotated[Optional[conlist(StrictStr)], Field(description="Sort by param, it can be one param or a list of params separated by comma")] = None, order : Annotated[Optional[StrictStr], Field(description="Order direction, it can be `ASC` for ascending or `DESC` for descending")] = None, status : Annotated[Optional[StrictStr], Field(description="Token ownership status")] = None, **kwargs) -> GetOwnershipTokens200Response:  # noqa: E501
        """List all owned tokens (paginated)  # noqa: E501

        Returns all tokens and their data in your workspace.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ownership_tokens(blockchain_descriptor, vault_account_ids, ids, collection_ids, page_cursor, page_size, sort, order, status, async_req=True)
        >>> result = thread.get()

        :param blockchain_descriptor: Blockchain descriptor filter
        :type blockchain_descriptor: str
        :param vault_account_ids: A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request
        :type vault_account_ids: str
        :param ids: A comma separated list of NFT IDs. Up to 100 are allowed in a single request.
        :type ids: str
        :param collection_ids: A comma separated list of collection IDs. Up to 100 are allowed in a single request.
        :type collection_ids: str
        :param page_cursor: Page cursor to fetch
        :type page_cursor: str
        :param page_size: Items per page (max 100)
        :type page_size: float
        :param sort: Sort by param, it can be one param or a list of params separated by comma
        :type sort: List[str]
        :param order: Order direction, it can be `ASC` for ascending or `DESC` for descending
        :type order: str
        :param status: Token ownership status
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetOwnershipTokens200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ownership_tokens_with_http_info(blockchain_descriptor, vault_account_ids, ids, collection_ids, page_cursor, page_size, sort, order, status, **kwargs)  # noqa: E501

    @validate_arguments
    def get_ownership_tokens_with_http_info(self, blockchain_descriptor : Annotated[Optional[StrictStr], Field(description="Blockchain descriptor filter")] = None, vault_account_ids : Annotated[Optional[StrictStr], Field(description="A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request")] = None, ids : Annotated[Optional[StrictStr], Field(description="A comma separated list of NFT IDs. Up to 100 are allowed in a single request.")] = None, collection_ids : Annotated[Optional[StrictStr], Field(description="A comma separated list of collection IDs. Up to 100 are allowed in a single request.")] = None, page_cursor : Annotated[Optional[StrictStr], Field(description="Page cursor to fetch")] = None, page_size : Annotated[Optional[confloat(ge=100, le=1, strict=True)], Field(description="Items per page (max 100)")] = None, sort : Annotated[Optional[conlist(StrictStr)], Field(description="Sort by param, it can be one param or a list of params separated by comma")] = None, order : Annotated[Optional[StrictStr], Field(description="Order direction, it can be `ASC` for ascending or `DESC` for descending")] = None, status : Annotated[Optional[StrictStr], Field(description="Token ownership status")] = None, **kwargs):  # noqa: E501
        """List all owned tokens (paginated)  # noqa: E501

        Returns all tokens and their data in your workspace.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ownership_tokens_with_http_info(blockchain_descriptor, vault_account_ids, ids, collection_ids, page_cursor, page_size, sort, order, status, async_req=True)
        >>> result = thread.get()

        :param blockchain_descriptor: Blockchain descriptor filter
        :type blockchain_descriptor: str
        :param vault_account_ids: A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request
        :type vault_account_ids: str
        :param ids: A comma separated list of NFT IDs. Up to 100 are allowed in a single request.
        :type ids: str
        :param collection_ids: A comma separated list of collection IDs. Up to 100 are allowed in a single request.
        :type collection_ids: str
        :param page_cursor: Page cursor to fetch
        :type page_cursor: str
        :param page_size: Items per page (max 100)
        :type page_size: float
        :param sort: Sort by param, it can be one param or a list of params separated by comma
        :type sort: List[str]
        :param order: Order direction, it can be `ASC` for ascending or `DESC` for descending
        :type order: str
        :param status: Token ownership status
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetOwnershipTokens200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'blockchain_descriptor',
            'vault_account_ids',
            'ids',
            'collection_ids',
            'page_cursor',
            'page_size',
            'sort',
            'order',
            'status'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ownership_tokens" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('blockchain_descriptor') is not None:  # noqa: E501
            _query_params.append(('blockchainDescriptor', _params['blockchain_descriptor']))

        if _params.get('vault_account_ids') is not None:  # noqa: E501
            _query_params.append(('vaultAccountIds', _params['vault_account_ids']))

        if _params.get('ids') is not None:  # noqa: E501
            _query_params.append(('ids', _params['ids']))

        if _params.get('collection_ids') is not None:  # noqa: E501
            _query_params.append(('collectionIds', _params['collection_ids']))

        if _params.get('page_cursor') is not None:  # noqa: E501
            _query_params.append(('pageCursor', _params['page_cursor']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))
            _collection_formats['sort'] = 'multi'

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GetOwnershipTokens200Response",
        }

        return self.api_client.call_api(
            '/nfts/ownership/tokens', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_nft_token_by_id(self, id : Annotated[StrictStr, Field(..., description="NFT ID")], **kwargs) -> None:  # noqa: E501
        """Refresh token metadata  # noqa: E501

        Updates the latest token metadata.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_nft_token_by_id(id, async_req=True)
        >>> result = thread.get()

        :param id: NFT ID (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.update_nft_token_by_id_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def update_nft_token_by_id_with_http_info(self, id : Annotated[StrictStr, Field(..., description="NFT ID")], **kwargs):  # noqa: E501
        """Refresh token metadata  # noqa: E501

        Updates the latest token metadata.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_nft_token_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: NFT ID (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_nft_token_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/nfts/tokens/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_nft_token_status(self, id : Annotated[StrictStr, Field(..., description="NFT ID")], update_token_ownership_status_dto : UpdateTokenOwnershipStatusDto, **kwargs) -> None:  # noqa: E501
        """Update token ownership status  # noqa: E501

        Updates token ownership status for a tenant, in all tenant vaults.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_nft_token_status(id, update_token_ownership_status_dto, async_req=True)
        >>> result = thread.get()

        :param id: NFT ID (required)
        :type id: str
        :param update_token_ownership_status_dto: (required)
        :type update_token_ownership_status_dto: UpdateTokenOwnershipStatusDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.update_nft_token_status_with_http_info(id, update_token_ownership_status_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def update_nft_token_status_with_http_info(self, id : Annotated[StrictStr, Field(..., description="NFT ID")], update_token_ownership_status_dto : UpdateTokenOwnershipStatusDto, **kwargs):  # noqa: E501
        """Update token ownership status  # noqa: E501

        Updates token ownership status for a tenant, in all tenant vaults.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_nft_token_status_with_http_info(id, update_token_ownership_status_dto, async_req=True)
        >>> result = thread.get()

        :param id: NFT ID (required)
        :type id: str
        :param update_token_ownership_status_dto: (required)
        :type update_token_ownership_status_dto: UpdateTokenOwnershipStatusDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'update_token_ownership_status_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_nft_token_status" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_token_ownership_status_dto']:
            _body_params = _params['update_token_ownership_status_dto']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/nfts/ownership/tokens/{id}/status', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_ownership_tokens(self, blockchain_descriptor : Annotated[StrictStr, Field(..., description="Blockchain descriptor filter")], vault_account_id : Annotated[StrictStr, Field(..., description="Vault account filter")], **kwargs) -> None:  # noqa: E501
        """Refresh vault account tokens  # noqa: E501

        Updates all tokens and balances per blockchain and vault account.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ownership_tokens(blockchain_descriptor, vault_account_id, async_req=True)
        >>> result = thread.get()

        :param blockchain_descriptor: Blockchain descriptor filter (required)
        :type blockchain_descriptor: str
        :param vault_account_id: Vault account filter (required)
        :type vault_account_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.update_ownership_tokens_with_http_info(blockchain_descriptor, vault_account_id, **kwargs)  # noqa: E501

    @validate_arguments
    def update_ownership_tokens_with_http_info(self, blockchain_descriptor : Annotated[StrictStr, Field(..., description="Blockchain descriptor filter")], vault_account_id : Annotated[StrictStr, Field(..., description="Vault account filter")], **kwargs):  # noqa: E501
        """Refresh vault account tokens  # noqa: E501

        Updates all tokens and balances per blockchain and vault account.  **Note**: This endpoint is now in Beta, disabled for general availability at this time.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ownership_tokens_with_http_info(blockchain_descriptor, vault_account_id, async_req=True)
        >>> result = thread.get()

        :param blockchain_descriptor: Blockchain descriptor filter (required)
        :type blockchain_descriptor: str
        :param vault_account_id: Vault account filter (required)
        :type vault_account_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'blockchain_descriptor',
            'vault_account_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ownership_tokens" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('blockchain_descriptor') is not None:  # noqa: E501
            _query_params.append(('blockchainDescriptor', _params['blockchain_descriptor']))

        if _params.get('vault_account_id') is not None:  # noqa: E501
            _query_params.append(('vaultAccountId', _params['vault_account_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/nfts/ownership/tokens', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
