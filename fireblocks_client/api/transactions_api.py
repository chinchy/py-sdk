# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401

from typing_extensions import Annotated

from pydantic import Field, StrictStr, conint, constr

from typing import List, Optional

from fireblocks_client.models.cancel_transaction_response import CancelTransactionResponse
from fireblocks_client.models.create_transaction_response import CreateTransactionResponse
from fireblocks_client.models.drop_transaction_request import DropTransactionRequest
from fireblocks_client.models.drop_transaction_response import DropTransactionResponse
from fireblocks_client.models.estimated_network_fee_response import EstimatedNetworkFeeResponse
from fireblocks_client.models.estimated_transaction_fee_response import EstimatedTransactionFeeResponse
from fireblocks_client.models.freeze_transaction_response import FreezeTransactionResponse
from fireblocks_client.models.set_confirmations_threshold_request import SetConfirmationsThresholdRequest
from fireblocks_client.models.set_confirmations_threshold_response import SetConfirmationsThresholdResponse
from fireblocks_client.models.transaction_request import TransactionRequest
from fireblocks_client.models.transaction_response import TransactionResponse
from fireblocks_client.models.unfreeze_transaction_response import UnfreezeTransactionResponse
from fireblocks_client.models.validate_address_response import ValidateAddressResponse

from fireblocks_client.api_client import ApiClient
from fireblocks_client.api_client import Configuration
from fireblocks_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)
from pydantic import validate_arguments



class TransactionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, configuration:Configuration=None):
        if configuration is None:
            api_client = ApiClient()
        else:
            api_client = ApiClient(configuration)
        self.api_client = api_client

    @validate_arguments
    def cancel_transaction(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction to cancel")], **kwargs) -> CancelTransactionResponse:  # noqa: E501
        """Cancel a transaction  # noqa: E501

        Cancels a transaction by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_transaction(tx_id, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction to cancel (required)
        :type tx_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CancelTransactionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.cancel_transaction_with_http_info(tx_id, **kwargs)  # noqa: E501

    @validate_arguments
    def cancel_transaction_with_http_info(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction to cancel")], **kwargs):  # noqa: E501
        """Cancel a transaction  # noqa: E501

        Cancels a transaction by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_transaction_with_http_info(tx_id, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction to cancel (required)
        :type tx_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CancelTransactionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tx_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_transaction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tx_id']:
            _path_params['txId'] = _params['tx_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CancelTransactionResponse",
        }

        return self.api_client.call_api(
            '/transactions/{txId}/cancel', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_transaction(self, transaction_request : Optional[TransactionRequest] = None, **kwargs) -> CreateTransactionResponse:  # noqa: E501
        """Create a new transaction  # noqa: E501

        Creates a new transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_transaction(transaction_request, async_req=True)
        >>> result = thread.get()

        :param transaction_request:
        :type transaction_request: TransactionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateTransactionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_transaction_with_http_info(transaction_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_transaction_with_http_info(self, transaction_request : Optional[TransactionRequest] = None, **kwargs):  # noqa: E501
        """Create a new transaction  # noqa: E501

        Creates a new transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_transaction_with_http_info(transaction_request, async_req=True)
        >>> result = thread.get()

        :param transaction_request:
        :type transaction_request: TransactionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateTransactionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'transaction_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_transaction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['transaction_request']:
            _body_params = _params['transaction_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CreateTransactionResponse",
        }

        return self.api_client.call_api(
            '/transactions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def drop_transaction(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction")], drop_transaction_request : Optional[DropTransactionRequest] = None, **kwargs) -> DropTransactionResponse:  # noqa: E501
        """Drop ETH transaction by ID  # noqa: E501

        Drops a stuck ETH transaction and creates a replacement transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.drop_transaction(tx_id, drop_transaction_request, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction (required)
        :type tx_id: str
        :param drop_transaction_request:
        :type drop_transaction_request: DropTransactionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DropTransactionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.drop_transaction_with_http_info(tx_id, drop_transaction_request, **kwargs)  # noqa: E501

    @validate_arguments
    def drop_transaction_with_http_info(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction")], drop_transaction_request : Optional[DropTransactionRequest] = None, **kwargs):  # noqa: E501
        """Drop ETH transaction by ID  # noqa: E501

        Drops a stuck ETH transaction and creates a replacement transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.drop_transaction_with_http_info(tx_id, drop_transaction_request, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction (required)
        :type tx_id: str
        :param drop_transaction_request:
        :type drop_transaction_request: DropTransactionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DropTransactionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tx_id',
            'drop_transaction_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method drop_transaction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tx_id']:
            _path_params['txId'] = _params['tx_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['drop_transaction_request']:
            _body_params = _params['drop_transaction_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DropTransactionResponse",
        }

        return self.api_client.call_api(
            '/transactions/{txId}/drop', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def estimate_network_fee(self, asset_id : Annotated[StrictStr, Field(..., description="The asset for which to estimate the fee")], **kwargs) -> EstimatedNetworkFeeResponse:  # noqa: E501
        """Estimate the required fee for an asset  # noqa: E501

        Gets the estimated required fee for an asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.estimate_network_fee(asset_id, async_req=True)
        >>> result = thread.get()

        :param asset_id: The asset for which to estimate the fee (required)
        :type asset_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EstimatedNetworkFeeResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.estimate_network_fee_with_http_info(asset_id, **kwargs)  # noqa: E501

    @validate_arguments
    def estimate_network_fee_with_http_info(self, asset_id : Annotated[StrictStr, Field(..., description="The asset for which to estimate the fee")], **kwargs):  # noqa: E501
        """Estimate the required fee for an asset  # noqa: E501

        Gets the estimated required fee for an asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.estimate_network_fee_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param asset_id: The asset for which to estimate the fee (required)
        :type asset_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EstimatedNetworkFeeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'asset_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method estimate_network_fee" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('asset_id') is not None:  # noqa: E501
            _query_params.append(('assetId', _params['asset_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "EstimatedNetworkFeeResponse",
        }

        return self.api_client.call_api(
            '/estimate_network_fee', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def estimate_transaction_fee(self, transaction_request : Optional[TransactionRequest] = None, **kwargs) -> EstimatedTransactionFeeResponse:  # noqa: E501
        """Estimate transaction fee  # noqa: E501

        Estimates the transaction fee for a transaction request. * Note: Supports all Fireblocks assets except ZCash (ZEC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.estimate_transaction_fee(transaction_request, async_req=True)
        >>> result = thread.get()

        :param transaction_request:
        :type transaction_request: TransactionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EstimatedTransactionFeeResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.estimate_transaction_fee_with_http_info(transaction_request, **kwargs)  # noqa: E501

    @validate_arguments
    def estimate_transaction_fee_with_http_info(self, transaction_request : Optional[TransactionRequest] = None, **kwargs):  # noqa: E501
        """Estimate transaction fee  # noqa: E501

        Estimates the transaction fee for a transaction request. * Note: Supports all Fireblocks assets except ZCash (ZEC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.estimate_transaction_fee_with_http_info(transaction_request, async_req=True)
        >>> result = thread.get()

        :param transaction_request:
        :type transaction_request: TransactionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EstimatedTransactionFeeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'transaction_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method estimate_transaction_fee" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['transaction_request']:
            _body_params = _params['transaction_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "EstimatedTransactionFeeResponse",
        }

        return self.api_client.call_api(
            '/transactions/estimate_fee', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def freeze_transaction(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction to freeze")], **kwargs) -> FreezeTransactionResponse:  # noqa: E501
        """Freeze a transaction  # noqa: E501

        Freezes a transaction by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.freeze_transaction(tx_id, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction to freeze (required)
        :type tx_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FreezeTransactionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.freeze_transaction_with_http_info(tx_id, **kwargs)  # noqa: E501

    @validate_arguments
    def freeze_transaction_with_http_info(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction to freeze")], **kwargs):  # noqa: E501
        """Freeze a transaction  # noqa: E501

        Freezes a transaction by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.freeze_transaction_with_http_info(tx_id, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction to freeze (required)
        :type tx_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FreezeTransactionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tx_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method freeze_transaction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tx_id']:
            _path_params['txId'] = _params['tx_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "FreezeTransactionResponse",
        }

        return self.api_client.call_api(
            '/transactions/{txId}/freeze', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_transaction_by_external_id(self, external_tx_id : Annotated[constr(strict=True), Field(..., description="The external ID of the transaction to return")], **kwargs) -> TransactionResponse:  # noqa: E501
        """Find a specific transaction by external transaction ID  # noqa: E501

        Returns transaction by external transaction ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_by_external_id(external_tx_id, async_req=True)
        >>> result = thread.get()

        :param external_tx_id: The external ID of the transaction to return (required)
        :type external_tx_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransactionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_transaction_by_external_id_with_http_info(external_tx_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_transaction_by_external_id_with_http_info(self, external_tx_id : Annotated[constr(strict=True), Field(..., description="The external ID of the transaction to return")], **kwargs):  # noqa: E501
        """Find a specific transaction by external transaction ID  # noqa: E501

        Returns transaction by external transaction ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_by_external_id_with_http_info(external_tx_id, async_req=True)
        >>> result = thread.get()

        :param external_tx_id: The external ID of the transaction to return (required)
        :type external_tx_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransactionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'external_tx_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_by_external_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['external_tx_id']:
            _path_params['externalTxId'] = _params['external_tx_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "TransactionResponse",
        }

        return self.api_client.call_api(
            '/transactions/external_tx_id/{externalTxId}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_transaction_by_id(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction to return")], **kwargs) -> TransactionResponse:  # noqa: E501
        """Find a specific transaction by Fireblocks transaction ID  # noqa: E501

        Returns a transaction by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_by_id(tx_id, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction to return (required)
        :type tx_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransactionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_transaction_by_id_with_http_info(tx_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_transaction_by_id_with_http_info(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction to return")], **kwargs):  # noqa: E501
        """Find a specific transaction by Fireblocks transaction ID  # noqa: E501

        Returns a transaction by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_by_id_with_http_info(tx_id, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction to return (required)
        :type tx_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransactionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tx_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tx_id']:
            _path_params['txId'] = _params['tx_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "TransactionResponse",
            '400': "Error",
        }

        return self.api_client.call_api(
            '/transactions/{txId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_transactions(self, before : Annotated[Optional[StrictStr], Field(description="Unix timestamp in milliseconds. Returns only transactions created before the specified date")] = None, after : Annotated[Optional[StrictStr], Field(description="Unix timestamp in milliseconds. Returns only transactions created after the specified date")] = None, status : Annotated[Optional[StrictStr], Field(description="You can filter by one of the statuses.")] = None, order_by : Annotated[Optional[StrictStr], Field(description="The field to order the results by")] = None, sort : Annotated[Optional[StrictStr], Field(description="The direction to order the results by")] = None, limit : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500")] = None, source_type : Annotated[Optional[StrictStr], Field(description="The source type of the transaction")] = None, source_id : Annotated[Optional[StrictStr], Field(description="The source ID of the transaction")] = None, dest_type : Annotated[Optional[StrictStr], Field(description="The destination type of the transaction")] = None, dest_id : Annotated[Optional[StrictStr], Field(description="The destination ID of the transaction")] = None, assets : Annotated[Optional[StrictStr], Field(description="A list of assets to filter by, seperated by commas")] = None, tx_hash : Annotated[Optional[StrictStr], Field(description="Returns only results with a specified txHash")] = None, **kwargs) -> List[TransactionResponse]:  # noqa: E501
        """List transaction history  # noqa: E501

        Lists the transaction history for your workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions(before, after, status, order_by, sort, limit, source_type, source_id, dest_type, dest_id, assets, tx_hash, async_req=True)
        >>> result = thread.get()

        :param before: Unix timestamp in milliseconds. Returns only transactions created before the specified date
        :type before: str
        :param after: Unix timestamp in milliseconds. Returns only transactions created after the specified date
        :type after: str
        :param status: You can filter by one of the statuses.
        :type status: str
        :param order_by: The field to order the results by
        :type order_by: str
        :param sort: The direction to order the results by
        :type sort: str
        :param limit: Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500
        :type limit: int
        :param source_type: The source type of the transaction
        :type source_type: str
        :param source_id: The source ID of the transaction
        :type source_id: str
        :param dest_type: The destination type of the transaction
        :type dest_type: str
        :param dest_id: The destination ID of the transaction
        :type dest_id: str
        :param assets: A list of assets to filter by, seperated by commas
        :type assets: str
        :param tx_hash: Returns only results with a specified txHash
        :type tx_hash: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[TransactionResponse]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_transactions_with_http_info(before, after, status, order_by, sort, limit, source_type, source_id, dest_type, dest_id, assets, tx_hash, **kwargs)  # noqa: E501

    @validate_arguments
    def get_transactions_with_http_info(self, before : Annotated[Optional[StrictStr], Field(description="Unix timestamp in milliseconds. Returns only transactions created before the specified date")] = None, after : Annotated[Optional[StrictStr], Field(description="Unix timestamp in milliseconds. Returns only transactions created after the specified date")] = None, status : Annotated[Optional[StrictStr], Field(description="You can filter by one of the statuses.")] = None, order_by : Annotated[Optional[StrictStr], Field(description="The field to order the results by")] = None, sort : Annotated[Optional[StrictStr], Field(description="The direction to order the results by")] = None, limit : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500")] = None, source_type : Annotated[Optional[StrictStr], Field(description="The source type of the transaction")] = None, source_id : Annotated[Optional[StrictStr], Field(description="The source ID of the transaction")] = None, dest_type : Annotated[Optional[StrictStr], Field(description="The destination type of the transaction")] = None, dest_id : Annotated[Optional[StrictStr], Field(description="The destination ID of the transaction")] = None, assets : Annotated[Optional[StrictStr], Field(description="A list of assets to filter by, seperated by commas")] = None, tx_hash : Annotated[Optional[StrictStr], Field(description="Returns only results with a specified txHash")] = None, **kwargs):  # noqa: E501
        """List transaction history  # noqa: E501

        Lists the transaction history for your workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions_with_http_info(before, after, status, order_by, sort, limit, source_type, source_id, dest_type, dest_id, assets, tx_hash, async_req=True)
        >>> result = thread.get()

        :param before: Unix timestamp in milliseconds. Returns only transactions created before the specified date
        :type before: str
        :param after: Unix timestamp in milliseconds. Returns only transactions created after the specified date
        :type after: str
        :param status: You can filter by one of the statuses.
        :type status: str
        :param order_by: The field to order the results by
        :type order_by: str
        :param sort: The direction to order the results by
        :type sort: str
        :param limit: Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500
        :type limit: int
        :param source_type: The source type of the transaction
        :type source_type: str
        :param source_id: The source ID of the transaction
        :type source_id: str
        :param dest_type: The destination type of the transaction
        :type dest_type: str
        :param dest_id: The destination ID of the transaction
        :type dest_id: str
        :param assets: A list of assets to filter by, seperated by commas
        :type assets: str
        :param tx_hash: Returns only results with a specified txHash
        :type tx_hash: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[TransactionResponse], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'before',
            'after',
            'status',
            'order_by',
            'sort',
            'limit',
            'source_type',
            'source_id',
            'dest_type',
            'dest_id',
            'assets',
            'tx_hash'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transactions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('before') is not None:  # noqa: E501
            _query_params.append(('before', _params['before']))

        if _params.get('after') is not None:  # noqa: E501
            _query_params.append(('after', _params['after']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('source_type') is not None:  # noqa: E501
            _query_params.append(('sourceType', _params['source_type']))

        if _params.get('source_id') is not None:  # noqa: E501
            _query_params.append(('sourceId', _params['source_id']))

        if _params.get('dest_type') is not None:  # noqa: E501
            _query_params.append(('destType', _params['dest_type']))

        if _params.get('dest_id') is not None:  # noqa: E501
            _query_params.append(('destId', _params['dest_id']))

        if _params.get('assets') is not None:  # noqa: E501
            _query_params.append(('assets', _params['assets']))

        if _params.get('tx_hash') is not None:  # noqa: E501
            _query_params.append(('txHash', _params['tx_hash']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[TransactionResponse]",
        }

        return self.api_client.call_api(
            '/transactions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def set_confirmation_threshold_for_transaction(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction")], set_confirmations_threshold_request : Optional[SetConfirmationsThresholdRequest] = None, **kwargs) -> SetConfirmationsThresholdResponse:  # noqa: E501
        """Set confirmation threshold by transaction ID  # noqa: E501

        Overrides the required number of confirmations for transaction completion by transaction ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_confirmation_threshold_for_transaction(tx_id, set_confirmations_threshold_request, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction (required)
        :type tx_id: str
        :param set_confirmations_threshold_request:
        :type set_confirmations_threshold_request: SetConfirmationsThresholdRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SetConfirmationsThresholdResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.set_confirmation_threshold_for_transaction_with_http_info(tx_id, set_confirmations_threshold_request, **kwargs)  # noqa: E501

    @validate_arguments
    def set_confirmation_threshold_for_transaction_with_http_info(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction")], set_confirmations_threshold_request : Optional[SetConfirmationsThresholdRequest] = None, **kwargs):  # noqa: E501
        """Set confirmation threshold by transaction ID  # noqa: E501

        Overrides the required number of confirmations for transaction completion by transaction ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_confirmation_threshold_for_transaction_with_http_info(tx_id, set_confirmations_threshold_request, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction (required)
        :type tx_id: str
        :param set_confirmations_threshold_request:
        :type set_confirmations_threshold_request: SetConfirmationsThresholdRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SetConfirmationsThresholdResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tx_id',
            'set_confirmations_threshold_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_confirmation_threshold_for_transaction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tx_id']:
            _path_params['txId'] = _params['tx_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['set_confirmations_threshold_request']:
            _body_params = _params['set_confirmations_threshold_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SetConfirmationsThresholdResponse",
        }

        return self.api_client.call_api(
            '/transactions/{txId}/set_confirmation_threshold', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def set_confirmation_threshold_for_transaction_by_hash(self, tx_hash : Annotated[constr(strict=True), Field(..., description="The TxHash")], set_confirmations_threshold_request : Optional[SetConfirmationsThresholdRequest] = None, **kwargs) -> SetConfirmationsThresholdResponse:  # noqa: E501
        """Set confirmation threshold by transaction hash  # noqa: E501

        Overrides the required number of confirmations for transaction completion by transaction hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_confirmation_threshold_for_transaction_by_hash(tx_hash, set_confirmations_threshold_request, async_req=True)
        >>> result = thread.get()

        :param tx_hash: The TxHash (required)
        :type tx_hash: str
        :param set_confirmations_threshold_request:
        :type set_confirmations_threshold_request: SetConfirmationsThresholdRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SetConfirmationsThresholdResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.set_confirmation_threshold_for_transaction_by_hash_with_http_info(tx_hash, set_confirmations_threshold_request, **kwargs)  # noqa: E501

    @validate_arguments
    def set_confirmation_threshold_for_transaction_by_hash_with_http_info(self, tx_hash : Annotated[constr(strict=True), Field(..., description="The TxHash")], set_confirmations_threshold_request : Optional[SetConfirmationsThresholdRequest] = None, **kwargs):  # noqa: E501
        """Set confirmation threshold by transaction hash  # noqa: E501

        Overrides the required number of confirmations for transaction completion by transaction hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_confirmation_threshold_for_transaction_by_hash_with_http_info(tx_hash, set_confirmations_threshold_request, async_req=True)
        >>> result = thread.get()

        :param tx_hash: The TxHash (required)
        :type tx_hash: str
        :param set_confirmations_threshold_request:
        :type set_confirmations_threshold_request: SetConfirmationsThresholdRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SetConfirmationsThresholdResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tx_hash',
            'set_confirmations_threshold_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_confirmation_threshold_for_transaction_by_hash" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tx_hash']:
            _path_params['txHash'] = _params['tx_hash']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['set_confirmations_threshold_request']:
            _body_params = _params['set_confirmations_threshold_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SetConfirmationsThresholdResponse",
        }

        return self.api_client.call_api(
            '/txHash/{txHash}/set_confirmation_threshold', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def unfreeze_transaction(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction to unfreeze")], **kwargs) -> UnfreezeTransactionResponse:  # noqa: E501
        """Unfreeze a transaction  # noqa: E501

        Unfreezes a transaction by ID and makes the transaction available again.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unfreeze_transaction(tx_id, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction to unfreeze (required)
        :type tx_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UnfreezeTransactionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.unfreeze_transaction_with_http_info(tx_id, **kwargs)  # noqa: E501

    @validate_arguments
    def unfreeze_transaction_with_http_info(self, tx_id : Annotated[constr(strict=True), Field(..., description="The ID of the transaction to unfreeze")], **kwargs):  # noqa: E501
        """Unfreeze a transaction  # noqa: E501

        Unfreezes a transaction by ID and makes the transaction available again.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unfreeze_transaction_with_http_info(tx_id, async_req=True)
        >>> result = thread.get()

        :param tx_id: The ID of the transaction to unfreeze (required)
        :type tx_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UnfreezeTransactionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tx_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unfreeze_transaction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tx_id']:
            _path_params['txId'] = _params['tx_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "UnfreezeTransactionResponse",
        }

        return self.api_client.call_api(
            '/transactions/{txId}/unfreeze', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def validate_address(self, asset_id : Annotated[StrictStr, Field(..., description="The asset of the address")], address : Annotated[StrictStr, Field(..., description="The address to validate")], **kwargs) -> ValidateAddressResponse:  # noqa: E501
        """Validate destination address  # noqa: E501

        Checks if an address is valid (for XRP, DOT, XLM, and EOS).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_address(asset_id, address, async_req=True)
        >>> result = thread.get()

        :param asset_id: The asset of the address (required)
        :type asset_id: str
        :param address: The address to validate (required)
        :type address: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ValidateAddressResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.validate_address_with_http_info(asset_id, address, **kwargs)  # noqa: E501

    @validate_arguments
    def validate_address_with_http_info(self, asset_id : Annotated[StrictStr, Field(..., description="The asset of the address")], address : Annotated[StrictStr, Field(..., description="The address to validate")], **kwargs):  # noqa: E501
        """Validate destination address  # noqa: E501

        Checks if an address is valid (for XRP, DOT, XLM, and EOS).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_address_with_http_info(asset_id, address, async_req=True)
        >>> result = thread.get()

        :param asset_id: The asset of the address (required)
        :type asset_id: str
        :param address: The address to validate (required)
        :type address: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ValidateAddressResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'asset_id',
            'address'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_address" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['asset_id']:
            _path_params['assetId'] = _params['asset_id']

        if _params['address']:
            _path_params['address'] = _params['address']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ValidateAddressResponse",
        }

        return self.api_client.call_api(
            '/transactions/validate_address/{assetId}/{address}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
