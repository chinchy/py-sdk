# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from fireblocks_client.models.add_asset_to_external_wallet_request_one_of1_additional_info_one_of import AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf
from fireblocks_client.models.add_asset_to_external_wallet_request_one_of1_additional_info_one_of1 import AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1
from fireblocks_client.models.add_asset_to_external_wallet_request_one_of1_additional_info_one_of2 import AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2
from typing import Any, List, Literal
from pydantic import Field, validate_arguments

ADDASSETTOEXTERNALWALLETREQUESTONEOF1ADDITIONALINFO_ONE_OF_SCHEMAS = ["AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf", "AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1", "AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2"]

class AddAssetToExternalWalletRequestOneOf1AdditionalInfo(BaseModel):
    """
    AddAssetToExternalWalletRequestOneOf1AdditionalInfo
    """
    # data type: AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf
    oneof_schema_1_validator: Optional[AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf] = None
    # data type: AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1
    oneof_schema_2_validator: Optional[AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1] = None
    # data type: AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2
    oneof_schema_3_validator: Optional[AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2] = None
    actual_instance: Any
    one_of_schemas: List[str] = Literal[ADDASSETTOEXTERNALWALLETREQUESTONEOF1ADDITIONALINFO_ONE_OF_SCHEMAS]

    class Config:
        validate_assignment = True
        arbitrary_types_allowed = True

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = cls()
        error_messages = []
        match = 0
        # validate data type: AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf
        if type(v) is not AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf:
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf`")
        else:
            match += 1

        # validate data type: AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1
        if type(v) is not AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1:
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1`")
        else:
            match += 1

        # validate data type: AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2
        if type(v) is not AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2:
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AddAssetToExternalWalletRequestOneOf1AdditionalInfo with oneOf schemas: AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf, AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1, AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AddAssetToExternalWalletRequestOneOf1AdditionalInfo with oneOf schemas: AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf, AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1, AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> AddAssetToExternalWalletRequestOneOf1AdditionalInfo:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> AddAssetToExternalWalletRequestOneOf1AdditionalInfo:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        match = 0

        # deserialize data into AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf
        try:
            instance.actual_instance = AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1
        try:
            instance.actual_instance = AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2
        try:
            instance.actual_instance = AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AddAssetToExternalWalletRequestOneOf1AdditionalInfo with oneOf schemas: AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf, AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1, AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AddAssetToExternalWalletRequestOneOf1AdditionalInfo with oneOf schemas: AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf, AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf1, AddAssetToExternalWalletRequestOneOf1AdditionalInfoOneOf2. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

