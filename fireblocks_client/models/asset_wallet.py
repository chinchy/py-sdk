# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class AssetWallet(BaseModel):
    """
    AssetWallet
    """
    vault_id: Optional[StrictStr] = Field(None, alias="vaultId", description="ID of the vault account. You can [get the vault account by this ID](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid) to retrieve vault properties such as its name, auto fueling, hidden on UI or customer reference ID.")
    asset_id: Optional[StrictStr] = Field(None, alias="assetId", description="ID of the asset. You can get more information about this asset by using the [supported assets API](https://developers.fireblocks.com/reference/get_supported-assets)")
    available: Optional[StrictStr] = Field(None, description="Available balance, available to use in a transaction.")
    total: Optional[StrictStr] = Field(None, description="Total balance at the asset wallet, as seen at the blockchain explorers. This includes balance available, and any kind of unavailable balance such as locked, frozen, or others.")
    pending: Optional[StrictStr] = Field(None, description="Pending balance.")
    staked: Optional[StrictStr] = Field(None, description="Staked balance.")
    frozen: Optional[StrictStr] = Field(None, description="Funds frozen due to the anti-money laundering policy at this workspace.")
    locked_amount: Optional[StrictStr] = Field(None, alias="lockedAmount", description="Locked balance.")
    block_height: Optional[StrictStr] = Field(None, alias="blockHeight", description="The height (number) of the block of the balance. Can by empty.")
    block_hash: Optional[StrictStr] = Field(None, alias="blockHash", description="The hash of the block of the balance. Can by empty.")
    creation_timestamp: Optional[StrictStr] = Field(None, alias="creationTimestamp", description="Unix timestamp of the time the asset wallet was created.")
    __properties = ["vaultId", "assetId", "available", "total", "pending", "staked", "frozen", "lockedAmount", "blockHeight", "blockHash", "creationTimestamp"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AssetWallet:
        """Create an instance of AssetWallet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AssetWallet:
        """Create an instance of AssetWallet from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AssetWallet.parse_obj(obj)

        _obj = AssetWallet.parse_obj({
            "vault_id": obj.get("vaultId"),
            "asset_id": obj.get("assetId"),
            "available": obj.get("available"),
            "total": obj.get("total"),
            "pending": obj.get("pending"),
            "staked": obj.get("staked"),
            "frozen": obj.get("frozen"),
            "locked_amount": obj.get("lockedAmount"),
            "block_height": obj.get("blockHeight"),
            "block_hash": obj.get("blockHash"),
            "creation_timestamp": obj.get("creationTimestamp")
        })
        return _obj

