# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from fireblocks_client.models.authorization_groups import AuthorizationGroups

class AuthorizationInfo(BaseModel):
    """
    The information about your [Transaction Authorization Policy (TAP).](https://developers.fireblocks.com/docs/capabilities#transaction-authorization-policy-tap)
    """
    allow_operator_as_authorizer: Optional[StrictBool] = Field(None, alias="allowOperatorAsAuthorizer")
    logic: Optional[StrictStr] = None
    groups: Optional[conlist(AuthorizationGroups)] = None
    __properties = ["allowOperatorAsAuthorizer", "logic", "groups"]

    @validator('logic')
    def logic_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('AND', 'OR'):
            raise ValueError("must be one of enum values ('AND', 'OR')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthorizationInfo:
        """Create an instance of AuthorizationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item in self.groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthorizationInfo:
        """Create an instance of AuthorizationInfo from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AuthorizationInfo.parse_obj(obj)

        _obj = AuthorizationInfo.parse_obj({
            "allow_operator_as_authorizer": obj.get("allowOperatorAsAuthorizer"),
            "logic": obj.get("logic"),
            "groups": [AuthorizationGroups.from_dict(_item) for _item in obj.get("groups")] if obj.get("groups") is not None else None
        })
        return _obj

