# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class CollectionOwnershipResponse(BaseModel):
    """
    CollectionOwnershipResponse
    """
    id: StrictStr = Field(..., description="Fireblocks collection id")
    name: StrictStr = Field(..., description="Collection name")
    symbol: StrictStr = Field(..., description="Collection symbol")
    standard: Optional[StrictStr] = Field(None, description="Collection contract standard")
    blockchain_descriptor: StrictStr = Field(..., alias="blockchainDescriptor", description="Collection's blockchain")
    contract_address: Optional[StrictStr] = Field(None, alias="contractAddress", description="Collection contract standard")
    __properties = ["id", "name", "symbol", "standard", "blockchainDescriptor", "contractAddress"]

    @validator('blockchain_descriptor')
    def blockchain_descriptor_validate_enum(cls, v):
        if v not in ('ETH', 'ETH_TEST3', 'POLYGON', 'POLYGON_TEST_MUMBAI'):
            raise ValueError("must be one of enum values ('ETH', 'ETH_TEST3', 'POLYGON', 'POLYGON_TEST_MUMBAI')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CollectionOwnershipResponse:
        """Create an instance of CollectionOwnershipResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CollectionOwnershipResponse:
        """Create an instance of CollectionOwnershipResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CollectionOwnershipResponse.parse_obj(obj)

        _obj = CollectionOwnershipResponse.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "symbol": obj.get("symbol"),
            "standard": obj.get("standard"),
            "blockchain_descriptor": obj.get("blockchainDescriptor"),
            "contract_address": obj.get("contractAddress")
        })
        return _obj

