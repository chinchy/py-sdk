# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictFloat, StrictStr, conlist, validator

class CreateConnectionRequest(BaseModel):
    """
    CreateConnectionRequest
    """
    vault_account_id: StrictFloat = Field(..., alias="vaultAccountId", description="The ID of the vault to connect to the Web3 connection.")
    fee_level: StrictStr = Field(..., alias="feeLevel", description="The default fee level. Valid values are `MEDIUM` and `HIGH`.")
    uri: StrictStr = Field(..., description="The WalletConnect uri provided by the dapp.")
    chain_ids: conlist(StrictStr) = Field(..., alias="chainIds", description="The ID of the blockchain network used in the Web3 connection.")
    __properties = ["vaultAccountId", "feeLevel", "uri", "chainIds"]

    @validator('fee_level')
    def fee_level_validate_enum(cls, v):
        if v not in ('MEDIUM', 'HIGH'):
            raise ValueError("must be one of enum values ('MEDIUM', 'HIGH')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateConnectionRequest:
        """Create an instance of CreateConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateConnectionRequest:
        """Create an instance of CreateConnectionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateConnectionRequest.parse_obj(obj)

        _obj = CreateConnectionRequest.parse_obj({
            "vault_account_id": obj.get("vaultAccountId"),
            "fee_level": obj.get("feeLevel"),
            "uri": obj.get("uri"),
            "chain_ids": obj.get("chainIds")
        })
        return _obj

