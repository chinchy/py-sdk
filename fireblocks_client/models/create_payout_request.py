# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from fireblocks_client.models.payment_account import PaymentAccount
from fireblocks_client.models.payout_instruction import PayoutInstruction

class CreatePayoutRequest(BaseModel):
    """
    CreatePayoutRequest
    """
    payment_account: PaymentAccount = Field(..., alias="paymentAccount")
    instruction_set: conlist(PayoutInstruction) = Field(..., alias="instructionSet")
    __properties = ["paymentAccount", "instructionSet"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePayoutRequest:
        """Create an instance of CreatePayoutRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_account
        if self.payment_account:
            _dict['paymentAccount'] = self.payment_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in instruction_set (list)
        _items = []
        if self.instruction_set:
            for _item in self.instruction_set:
                if _item:
                    _items.append(_item.to_dict())
            _dict['instructionSet'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePayoutRequest:
        """Create an instance of CreatePayoutRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreatePayoutRequest.parse_obj(obj)

        _obj = CreatePayoutRequest.parse_obj({
            "payment_account": PaymentAccount.from_dict(obj.get("paymentAccount")) if obj.get("paymentAccount") is not None else None,
            "instruction_set": [PayoutInstruction.from_dict(_item) for _item in obj.get("instructionSet")] if obj.get("instructionSet") is not None else None
        })
        return _obj

