# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from fireblocks_client.models.one_time_address import OneTimeAddress

class DestinationTransferPeerPath(BaseModel):
    """
    DestinationTransferPeerPath
    """
    type: StrictStr = ...
    sub_type: Optional[StrictStr] = Field(None, alias="subType")
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    wallet_id: Optional[StrictStr] = Field(None, alias="walletId")
    one_time_address: Optional[OneTimeAddress] = Field(None, alias="oneTimeAddress")
    __properties = ["type", "subType", "id", "name", "walletId", "oneTimeAddress"]

    @validator('type')
    def type_validate_enum(cls, v):
        if v not in ('VAULT_ACCOUNT', 'EXCHANGE_ACCOUNT', 'INTERNAL_WALLET', 'EXTERNAL_WALLET', 'NETWORK_CONNECTION', 'FIAT_ACCOUNT', 'COMPOUND', 'GAS_STATION', 'ONE_TIME_ADDRESS', 'UNKNOWN', 'END_USER_WALLET'):
            raise ValueError("must be one of enum values ('VAULT_ACCOUNT', 'EXCHANGE_ACCOUNT', 'INTERNAL_WALLET', 'EXTERNAL_WALLET', 'NETWORK_CONNECTION', 'FIAT_ACCOUNT', 'COMPOUND', 'GAS_STATION', 'ONE_TIME_ADDRESS', 'UNKNOWN', 'END_USER_WALLET')")
        return v

    @validator('sub_type')
    def sub_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('BINANCE', 'BINANCEUS', 'BITFINEX', 'BITHUMB', 'BITMEX', 'BITSO', 'BITSTAMP', 'BITTREX', 'BLINC', 'BYBIT', 'CIRCLE', 'COINBASEEXCHANGE', 'COINBASEPRO', 'COINMETRO', 'COINSPRO', 'CRYPTOCOM', 'DERIBIT', 'GEMINI', 'HITBTC', 'HUOBI', 'INDEPENDENTRESERVE', 'KORBIT', 'KRAKEN', 'KRAKENINTL', 'KUCOIN', 'LIQUID', 'OKCOIN', 'OKEX', 'PAXOS', 'POLONIEX', 'External', 'Internal'):
            raise ValueError("must be one of enum values ('BINANCE', 'BINANCEUS', 'BITFINEX', 'BITHUMB', 'BITMEX', 'BITSO', 'BITSTAMP', 'BITTREX', 'BLINC', 'BYBIT', 'CIRCLE', 'COINBASEEXCHANGE', 'COINBASEPRO', 'COINMETRO', 'COINSPRO', 'CRYPTOCOM', 'DERIBIT', 'GEMINI', 'HITBTC', 'HUOBI', 'INDEPENDENTRESERVE', 'KORBIT', 'KRAKEN', 'KRAKENINTL', 'KUCOIN', 'LIQUID', 'OKCOIN', 'OKEX', 'PAXOS', 'POLONIEX', 'External', 'Internal')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DestinationTransferPeerPath:
        """Create an instance of DestinationTransferPeerPath from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of one_time_address
        if self.one_time_address:
            _dict['oneTimeAddress'] = self.one_time_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DestinationTransferPeerPath:
        """Create an instance of DestinationTransferPeerPath from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DestinationTransferPeerPath.parse_obj(obj)

        _obj = DestinationTransferPeerPath.parse_obj({
            "type": obj.get("type"),
            "sub_type": obj.get("subType"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "wallet_id": obj.get("walletId"),
            "one_time_address": OneTimeAddress.from_dict(obj.get("oneTimeAddress")) if obj.get("oneTimeAddress") is not None else None
        })
        return _obj

