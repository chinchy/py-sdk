# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from fireblocks_client.models.exchange_asset import ExchangeAsset
from fireblocks_client.models.exchange_trading_account import ExchangeTradingAccount
from fireblocks_client.models.exchange_type import ExchangeType

class ExchangeAccount(BaseModel):
    """
    ExchangeAccount
    """
    id: Optional[StrictStr] = None
    type: Optional[ExchangeType] = None
    name: Optional[StrictStr] = Field(None, description="Display name of the exchange account")
    status: Optional[StrictStr] = None
    assets: Optional[conlist(ExchangeAsset)] = None
    trading_accounts: Optional[conlist(ExchangeTradingAccount)] = Field(None, alias="tradingAccounts")
    is_subaccount: Optional[StrictBool] = Field(None, alias="isSubaccount", description="True if the account is a subaccount in an exchange")
    main_account_id: Optional[StrictStr] = Field(None, alias="mainAccountId", description="if the account is a sub-account, the ID of the main account")
    __properties = ["id", "type", "name", "status", "assets", "tradingAccounts", "isSubaccount", "mainAccountId"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExchangeAccount:
        """Create an instance of ExchangeAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in assets (list)
        _items = []
        if self.assets:
            for _item in self.assets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trading_accounts (list)
        _items = []
        if self.trading_accounts:
            for _item in self.trading_accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tradingAccounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExchangeAccount:
        """Create an instance of ExchangeAccount from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ExchangeAccount.parse_obj(obj)

        _obj = ExchangeAccount.parse_obj({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "assets": [ExchangeAsset.from_dict(_item) for _item in obj.get("assets")] if obj.get("assets") is not None else None,
            "trading_accounts": [ExchangeTradingAccount.from_dict(_item) for _item in obj.get("tradingAccounts")] if obj.get("tradingAccounts") is not None else None,
            "is_subaccount": obj.get("isSubaccount"),
            "main_account_id": obj.get("mainAccountId")
        })
        return _obj

