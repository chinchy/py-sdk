# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictFloat, StrictStr

class GetFilterParameter(BaseModel):
    """
    GetFilterParameter
    """
    id: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = Field(None, alias="userId")
    vault_account_id: Optional[StrictFloat] = Field(None, alias="vaultAccountId")
    connection_method: Optional[StrictStr] = Field(None, alias="connectionMethod")
    fee_level: Optional[StrictStr] = Field(None, alias="feeLevel")
    app_url: Optional[StrictStr] = Field(None, alias="appUrl")
    app_name: Optional[StrictStr] = Field(None, alias="appName")
    __properties = ["id", "userId", "vaultAccountId", "connectionMethod", "feeLevel", "appUrl", "appName"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetFilterParameter:
        """Create an instance of GetFilterParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetFilterParameter:
        """Create an instance of GetFilterParameter from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetFilterParameter.parse_obj(obj)

        _obj = GetFilterParameter.parse_obj({
            "id": obj.get("id"),
            "user_id": obj.get("userId"),
            "vault_account_id": obj.get("vaultAccountId"),
            "connection_method": obj.get("connectionMethod"),
            "fee_level": obj.get("feeLevel"),
            "app_url": obj.get("appUrl"),
            "app_name": obj.get("appName")
        })
        return _obj

