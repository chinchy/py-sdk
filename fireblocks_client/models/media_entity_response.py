# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator

class MediaEntityResponse(BaseModel):
    """
    MediaEntityResponse
    """
    url: StrictStr = Field(..., description="Cached accessible URL")
    content_type: StrictStr = Field(..., alias="contentType", description="Media type")
    __properties = ["url", "contentType"]

    @validator('content_type')
    def content_type_validate_enum(cls, v):
        if v not in ('IMAGE', 'VIDEO', 'ANIMATION', 'THREE_D', 'TEXT', 'GIF', 'UNKNOWN_TYPE', 'SVG', 'AUDIO'):
            raise ValueError("must be one of enum values ('IMAGE', 'VIDEO', 'ANIMATION', 'THREE_D', 'TEXT', 'GIF', 'UNKNOWN_TYPE', 'SVG', 'AUDIO')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MediaEntityResponse:
        """Create an instance of MediaEntityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MediaEntityResponse:
        """Create an instance of MediaEntityResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MediaEntityResponse.parse_obj(obj)

        _obj = MediaEntityResponse.parse_obj({
            "url": obj.get("url"),
            "content_type": obj.get("contentType")
        })
        return _obj

