# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from fireblocks_client.models.config_change_request_status import ConfigChangeRequestStatus
from fireblocks_client.models.network_connection_response_local_channel import NetworkConnectionResponseLocalChannel
from fireblocks_client.models.network_connection_response_remote_channel import NetworkConnectionResponseRemoteChannel
from fireblocks_client.models.network_connection_routing_policy import NetworkConnectionRoutingPolicy
from fireblocks_client.models.network_id import NetworkId

class NetworkConnectionResponse(BaseModel):
    """
    NetworkConnectionResponse
    """
    id: StrictStr = ...
    local_channel: Optional[NetworkConnectionResponseLocalChannel] = Field(None, alias="localChannel")
    remote_channel: Optional[NetworkConnectionResponseRemoteChannel] = Field(None, alias="remoteChannel")
    status: ConfigChangeRequestStatus = ...
    local_network_id: NetworkId = Field(..., alias="localNetworkId")
    remote_network_id: NetworkId = Field(..., alias="remoteNetworkId")
    routing_policy: NetworkConnectionRoutingPolicy = Field(..., alias="routingPolicy")
    __properties = ["id", "localChannel", "remoteChannel", "status", "localNetworkId", "remoteNetworkId", "routingPolicy"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetworkConnectionResponse:
        """Create an instance of NetworkConnectionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of local_channel
        if self.local_channel:
            _dict['localChannel'] = self.local_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_channel
        if self.remote_channel:
            _dict['remoteChannel'] = self.remote_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_network_id
        if self.local_network_id:
            _dict['localNetworkId'] = self.local_network_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_network_id
        if self.remote_network_id:
            _dict['remoteNetworkId'] = self.remote_network_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of routing_policy
        if self.routing_policy:
            _dict['routingPolicy'] = self.routing_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkConnectionResponse:
        """Create an instance of NetworkConnectionResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NetworkConnectionResponse.parse_obj(obj)

        _obj = NetworkConnectionResponse.parse_obj({
            "id": obj.get("id"),
            "local_channel": NetworkConnectionResponseLocalChannel.from_dict(obj.get("localChannel")) if obj.get("localChannel") is not None else None,
            "remote_channel": NetworkConnectionResponseRemoteChannel.from_dict(obj.get("remoteChannel")) if obj.get("remoteChannel") is not None else None,
            "status": obj.get("status"),
            "local_network_id": NetworkId.from_dict(obj.get("localNetworkId")) if obj.get("localNetworkId") is not None else None,
            "remote_network_id": NetworkId.from_dict(obj.get("remoteNetworkId")) if obj.get("remoteNetworkId") is not None else None,
            "routing_policy": NetworkConnectionRoutingPolicy.from_dict(obj.get("routingPolicy")) if obj.get("routingPolicy") is not None else None
        })
        return _obj

