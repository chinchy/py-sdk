# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from fireblocks_client.models.network_connection_routing_policy_crypto import NetworkConnectionRoutingPolicyCrypto
from fireblocks_client.models.network_connection_routing_policy_sen import NetworkConnectionRoutingPolicySen
from fireblocks_client.models.network_connection_routing_policy_sen_test import NetworkConnectionRoutingPolicySenTest
from fireblocks_client.models.network_connection_routing_policy_signet import NetworkConnectionRoutingPolicySignet
from fireblocks_client.models.network_connection_routing_policy_signet_test import NetworkConnectionRoutingPolicySignetTest

class NetworkConnectionRoutingPolicy(BaseModel):
    """
    NetworkConnectionRoutingPolicy
    """
    crypto: Optional[NetworkConnectionRoutingPolicyCrypto] = None
    sen: Optional[NetworkConnectionRoutingPolicySen] = None
    signet: Optional[NetworkConnectionRoutingPolicySignet] = None
    sen_test: Optional[NetworkConnectionRoutingPolicySenTest] = None
    signet_test: Optional[NetworkConnectionRoutingPolicySignetTest] = None
    __properties = ["crypto", "sen", "signet", "sen_test", "signet_test"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetworkConnectionRoutingPolicy:
        """Create an instance of NetworkConnectionRoutingPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of crypto
        if self.crypto:
            _dict['crypto'] = self.crypto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sen
        if self.sen:
            _dict['sen'] = self.sen.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signet
        if self.signet:
            _dict['signet'] = self.signet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sen_test
        if self.sen_test:
            _dict['sen_test'] = self.sen_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signet_test
        if self.signet_test:
            _dict['signet_test'] = self.signet_test.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkConnectionRoutingPolicy:
        """Create an instance of NetworkConnectionRoutingPolicy from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NetworkConnectionRoutingPolicy.parse_obj(obj)

        _obj = NetworkConnectionRoutingPolicy.parse_obj({
            "crypto": NetworkConnectionRoutingPolicyCrypto.from_dict(obj.get("crypto")) if obj.get("crypto") is not None else None,
            "sen": NetworkConnectionRoutingPolicySen.from_dict(obj.get("sen")) if obj.get("sen") is not None else None,
            "signet": NetworkConnectionRoutingPolicySignet.from_dict(obj.get("signet")) if obj.get("signet") is not None else None,
            "sen_test": NetworkConnectionRoutingPolicySenTest.from_dict(obj.get("sen_test")) if obj.get("sen_test") is not None else None,
            "signet_test": NetworkConnectionRoutingPolicySignetTest.from_dict(obj.get("signet_test")) if obj.get("signet_test") is not None else None
        })
        return _obj

