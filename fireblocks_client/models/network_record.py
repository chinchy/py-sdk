# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictStr
from fireblocks_client.models.destination_transfer_peer_path_response import DestinationTransferPeerPathResponse
from fireblocks_client.models.reward_info import RewardInfo
from fireblocks_client.models.source_transfer_peer_path_response import SourceTransferPeerPathResponse

class NetworkRecord(BaseModel):
    """
    NetworkRecord
    """
    source: Optional[SourceTransferPeerPathResponse] = None
    destination: Optional[DestinationTransferPeerPathResponse] = None
    tx_hash: Optional[StrictStr] = Field(None, alias="txHash")
    network_fee: Optional[StrictStr] = Field(None, alias="networkFee")
    asset_id: Optional[StrictStr] = Field(None, alias="assetId")
    net_amount: Optional[StrictStr] = Field(None, alias="netAmount", description="The net amount of the transaction, after fee deduction")
    is_dropped: Optional[StrictBool] = Field(None, alias="isDropped")
    type: Optional[StrictStr] = None
    destination_address: Optional[StrictStr] = Field(None, alias="destinationAddress")
    source_address: Optional[StrictStr] = Field(None, alias="sourceAddress")
    amount_usd: Optional[StrictStr] = Field(None, alias="amountUSD")
    index: Optional[StrictFloat] = None
    reward_info: Optional[RewardInfo] = Field(None, alias="rewardInfo")
    __properties = ["source", "destination", "txHash", "networkFee", "assetId", "netAmount", "isDropped", "type", "destinationAddress", "sourceAddress", "amountUSD", "index", "rewardInfo"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetworkRecord:
        """Create an instance of NetworkRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reward_info
        if self.reward_info:
            _dict['rewardInfo'] = self.reward_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkRecord:
        """Create an instance of NetworkRecord from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NetworkRecord.parse_obj(obj)

        _obj = NetworkRecord.parse_obj({
            "source": SourceTransferPeerPathResponse.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "destination": DestinationTransferPeerPathResponse.from_dict(obj.get("destination")) if obj.get("destination") is not None else None,
            "tx_hash": obj.get("txHash"),
            "network_fee": obj.get("networkFee"),
            "asset_id": obj.get("assetId"),
            "net_amount": obj.get("netAmount"),
            "is_dropped": obj.get("isDropped"),
            "type": obj.get("type"),
            "destination_address": obj.get("destinationAddress"),
            "source_address": obj.get("sourceAddress"),
            "amount_usd": obj.get("amountUSD"),
            "index": obj.get("index"),
            "reward_info": RewardInfo.from_dict(obj.get("rewardInfo")) if obj.get("rewardInfo") is not None else None
        })
        return _obj

