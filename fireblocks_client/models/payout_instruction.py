# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from fireblocks_client.models.instruction_amount import InstructionAmount
from fireblocks_client.models.payee_account import PayeeAccount

class PayoutInstruction(BaseModel):
    """
    PayoutInstruction
    """
    id: Optional[StrictStr] = None
    payee_account: PayeeAccount = Field(..., alias="payeeAccount")
    amount: InstructionAmount = ...
    __properties = ["id", "payeeAccount", "amount"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PayoutInstruction:
        """Create an instance of PayoutInstruction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payee_account
        if self.payee_account:
            _dict['payeeAccount'] = self.payee_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PayoutInstruction:
        """Create an instance of PayoutInstruction from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PayoutInstruction.parse_obj(obj)

        _obj = PayoutInstruction.parse_obj({
            "id": obj.get("id"),
            "payee_account": PayeeAccount.from_dict(obj.get("payeeAccount")) if obj.get("payeeAccount") is not None else None,
            "amount": InstructionAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None
        })
        return _obj

