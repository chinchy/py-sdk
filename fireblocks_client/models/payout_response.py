# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictFloat, StrictStr, conlist
from fireblocks_client.models.payment_account_response import PaymentAccountResponse
from fireblocks_client.models.payout_init_method import PayoutInitMethod
from fireblocks_client.models.payout_instruction_response import PayoutInstructionResponse
from fireblocks_client.models.payout_state import PayoutState
from fireblocks_client.models.payout_status import PayoutStatus

class PayoutResponse(BaseModel):
    """
    PayoutResponse
    """
    payout_id: StrictStr = Field(..., alias="payoutId")
    payment_account: PaymentAccountResponse = Field(..., alias="paymentAccount")
    created_at: StrictFloat = Field(..., alias="createdAt")
    state: PayoutState = ...
    status: PayoutStatus = ...
    reason_of_failure: Optional[StrictStr] = Field(None, alias="reasonOfFailure", description="<ul>  <li> INSUFFICIENT_BALANCE</li> <li> SOURCE_TRANSLATION</li> <li> SOURCE_NOT_UNIQUE</li> <li> SOURCE_NOT_FOUND</li> <li> SOURCE_TYPE_NOT_SUPPORTED</li> <li> EMPTY_SOURCE</li> <li> DESTINATION_TRANSLATION</li> <li> DESTINATION_NOT_UNIQUE</li> <li> DESTINATION_NOT_FOUND</li> <li> EMPTY_DESTINATION</li> <li> PARSING </li> <li> UNKNOWN</li> <li> FIREBLOCKS_CLIENT</li> <li> TRANSACTION_SUBMISSION</li> </ul> ")
    init_method: Optional[PayoutInitMethod] = Field(None, alias="initMethod")
    instruction_set: conlist(PayoutInstructionResponse) = Field(..., alias="instructionSet")
    report_url: Optional[StrictStr] = Field(None, alias="reportUrl")
    __properties = ["payoutId", "paymentAccount", "createdAt", "state", "status", "reasonOfFailure", "initMethod", "instructionSet", "reportUrl"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PayoutResponse:
        """Create an instance of PayoutResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_account
        if self.payment_account:
            _dict['paymentAccount'] = self.payment_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in instruction_set (list)
        _items = []
        if self.instruction_set:
            for _item in self.instruction_set:
                if _item:
                    _items.append(_item.to_dict())
            _dict['instructionSet'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PayoutResponse:
        """Create an instance of PayoutResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PayoutResponse.parse_obj(obj)

        _obj = PayoutResponse.parse_obj({
            "payout_id": obj.get("payoutId"),
            "payment_account": PaymentAccountResponse.from_dict(obj.get("paymentAccount")) if obj.get("paymentAccount") is not None else None,
            "created_at": obj.get("createdAt"),
            "state": obj.get("state"),
            "status": obj.get("status"),
            "reason_of_failure": obj.get("reasonOfFailure"),
            "init_method": obj.get("initMethod"),
            "instruction_set": [PayoutInstructionResponse.from_dict(_item) for _item in obj.get("instructionSet")] if obj.get("instructionSet") is not None else None,
            "report_url": obj.get("reportUrl")
        })
        return _obj

