# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel
from fireblocks_client.models.policy_response import PolicyResponse
from fireblocks_client.models.policy_validation import PolicyValidation

class PolicyAndValidationResponse(BaseModel):
    """
    Policy validation
    """
    policy: PolicyResponse = ...
    validation: PolicyValidation = ...
    __properties = ["policy", "validation"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PolicyAndValidationResponse:
        """Create an instance of PolicyAndValidationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation
        if self.validation:
            _dict['validation'] = self.validation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyAndValidationResponse:
        """Create an instance of PolicyAndValidationResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PolicyAndValidationResponse.parse_obj(obj)

        _obj = PolicyAndValidationResponse.parse_obj({
            "policy": PolicyResponse.from_dict(obj.get("policy")) if obj.get("policy") is not None else None,
            "validation": PolicyValidation.from_dict(obj.get("validation")) if obj.get("validation") is not None else None
        })
        return _obj

