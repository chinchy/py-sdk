# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from fireblocks_client.models.amount_aggregation_time_period_method import AmountAggregationTimePeriodMethod

class PolicyRuleAmountAggregation(BaseModel):
    """
    Defines the method by which the Policy Engine calculates accumulation. It uses the Initiator, Source, and Destination to calculate accumulation toward the value under Minimum, for the time under Time Period. 
    """
    operators: Optional[AmountAggregationTimePeriodMethod] = None
    src_transfer_peers: Optional[AmountAggregationTimePeriodMethod] = Field(None, alias="srcTransferPeers")
    dst_transfer_peers: Optional[AmountAggregationTimePeriodMethod] = Field(None, alias="dstTransferPeers")
    __properties = ["operators", "srcTransferPeers", "dstTransferPeers"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PolicyRuleAmountAggregation:
        """Create an instance of PolicyRuleAmountAggregation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyRuleAmountAggregation:
        """Create an instance of PolicyRuleAmountAggregation from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PolicyRuleAmountAggregation.parse_obj(obj)

        _obj = PolicyRuleAmountAggregation.parse_obj({
            "operators": obj.get("operators"),
            "src_transfer_peers": obj.get("srcTransferPeers"),
            "dst_transfer_peers": obj.get("dstTransferPeers")
        })
        return _obj

