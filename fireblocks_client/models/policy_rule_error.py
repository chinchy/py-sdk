# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictFloat, StrictStr, validator

class PolicyRuleError(BaseModel):
    """
    Rule validation result error
    """
    error_message: StrictStr = Field(..., alias="errorMessage", description="Error message")
    error_code: StrictFloat = Field(..., alias="errorCode", description="error code")
    error_code_name: StrictStr = Field(..., alias="errorCodeName", description="error code name")
    error_field: StrictStr = Field(..., alias="errorField", description="The field which the error relates to * operator - transaction initiator * operators - transaction initiators * authorizationGroups - transaction authorizer groups * designatedSigner - transaction signer * designatedSigners - transaction signers * contractMethods - contract methods * amountAggregation - transaction amount aggregation configuration * src - transaction source asset configuration * dst - transaction destination asset configuration ")
    __properties = ["errorMessage", "errorCode", "errorCodeName", "errorField"]

    @validator('error_field')
    def error_field_validate_enum(cls, v):
        if v not in ('operator', 'operators', 'authorizationGroups', 'designatedSigner', 'designatedSigners', 'contractMethods', 'amountAggregation', 'src', 'dst'):
            raise ValueError("must be one of enum values ('operator', 'operators', 'authorizationGroups', 'designatedSigner', 'designatedSigners', 'contractMethods', 'amountAggregation', 'src', 'dst')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PolicyRuleError:
        """Create an instance of PolicyRuleError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyRuleError:
        """Create an instance of PolicyRuleError from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PolicyRuleError.parse_obj(obj)

        _obj = PolicyRuleError.parse_obj({
            "error_message": obj.get("errorMessage"),
            "error_code": obj.get("errorCode"),
            "error_code_name": obj.get("errorCodeName"),
            "error_field": obj.get("errorField")
        })
        return _obj

