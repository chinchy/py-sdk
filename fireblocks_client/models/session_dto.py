# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List
from pydantic import BaseModel, Field, StrictFloat, StrictStr, conlist, validator
from fireblocks_client.models.session_dto_session_metadata import SessionDTOSessionMetadata

class SessionDTO(BaseModel):
    """
    SessionDTO
    """
    id: StrictStr = Field(..., description="Id of the connection")
    user_id: StrictStr = Field(..., alias="userId", description="Id of the user that created the connection")
    session_metadata: SessionDTOSessionMetadata = Field(..., alias="sessionMetadata")
    vault_account_id: StrictFloat = Field(..., alias="vaultAccountId", description="The vault to connect")
    fee_level: StrictStr = Field(..., alias="feeLevel", description="The default fee level")
    chain_ids: conlist(StrictStr) = Field(..., alias="chainIds", description="The chains approved for the connection")
    connection_type: StrictStr = Field(..., alias="connectionType", description="The connection's type")
    connection_method: StrictStr = Field(..., alias="connectionMethod", description="The method through which the connection was established")
    creation_date: datetime = Field(..., alias="creationDate", description="Timestamp of the session's creation")
    __properties = ["id", "userId", "sessionMetadata", "vaultAccountId", "feeLevel", "chainIds", "connectionType", "connectionMethod", "creationDate"]

    @validator('fee_level')
    def fee_level_validate_enum(cls, v):
        if v not in ('MEDIUM', 'HIGH'):
            raise ValueError("must be one of enum values ('MEDIUM', 'HIGH')")
        return v

    @validator('connection_type')
    def connection_type_validate_enum(cls, v):
        if v not in ('WalletConnect'):
            raise ValueError("must be one of enum values ('WalletConnect')")
        return v

    @validator('connection_method')
    def connection_method_validate_enum(cls, v):
        if v not in ('DESKTOP', 'MOBILE', 'API'):
            raise ValueError("must be one of enum values ('DESKTOP', 'MOBILE', 'API')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SessionDTO:
        """Create an instance of SessionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of session_metadata
        if self.session_metadata:
            _dict['sessionMetadata'] = self.session_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SessionDTO:
        """Create an instance of SessionDTO from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SessionDTO.parse_obj(obj)

        _obj = SessionDTO.parse_obj({
            "id": obj.get("id"),
            "user_id": obj.get("userId"),
            "session_metadata": SessionDTOSessionMetadata.from_dict(obj.get("sessionMetadata")) if obj.get("sessionMetadata") is not None else None,
            "vault_account_id": obj.get("vaultAccountId"),
            "fee_level": obj.get("feeLevel"),
            "chain_ids": obj.get("chainIds"),
            "connection_type": obj.get("connectionType"),
            "connection_method": obj.get("connectionMethod"),
            "creation_date": obj.get("creationDate")
        })
        return _obj

