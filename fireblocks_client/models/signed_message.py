# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictFloat, StrictStr, conlist, validator
from fireblocks_client.models.signed_message_signature import SignedMessageSignature

class SignedMessage(BaseModel):
    """
    A list of signed messages returned for raw signing.
    """
    content: Optional[StrictStr] = None
    algorithm: Optional[StrictStr] = None
    derivation_path: Optional[conlist(StrictFloat)] = Field(None, alias="derivationPath")
    signature: Optional[SignedMessageSignature] = None
    public_key: Optional[StrictStr] = Field(None, alias="publicKey")
    __properties = ["content", "algorithm", "derivationPath", "signature", "publicKey"]

    @validator('algorithm')
    def algorithm_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('MPC_ECDSA_SECP256K1', 'MPC_EDDSA_ED25519'):
            raise ValueError("must be one of enum values ('MPC_ECDSA_SECP256K1', 'MPC_EDDSA_ED25519')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignedMessage:
        """Create an instance of SignedMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of signature
        if self.signature:
            _dict['signature'] = self.signature.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignedMessage:
        """Create an instance of SignedMessage from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SignedMessage.parse_obj(obj)

        _obj = SignedMessage.parse_obj({
            "content": obj.get("content"),
            "algorithm": obj.get("algorithm"),
            "derivation_path": obj.get("derivationPath"),
            "signature": SignedMessageSignature.from_dict(obj.get("signature")) if obj.get("signature") is not None else None,
            "public_key": obj.get("publicKey")
        })
        return _obj

