# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictFloat, StrictStr, conlist, validator
from fireblocks_client.models.media_entity_response import MediaEntityResponse
from fireblocks_client.models.token_response_collection import TokenResponseCollection

class TokenOwnershipResponse(BaseModel):
    """
    TokenOwnershipResponse
    """
    id: StrictStr = Field(..., description="The Fireblocks NFT asset id")
    token_id: StrictStr = Field(..., alias="tokenId", description="Token id within the contract/collection")
    standard: StrictStr = Field(..., description="ERC721 / ERC1155")
    metadata_uri: Optional[StrictStr] = Field(None, alias="metadataURI", description="URL of the original token JSON metadata")
    cached_metadata_uri: Optional[StrictStr] = Field(None, alias="cachedMetadataURI", description="URL of the cached token JSON metadata")
    media: conlist(MediaEntityResponse) = Field(..., description="Media items extracted from metadata JSON")
    collection: Optional[TokenResponseCollection] = None
    balance: StrictStr = ...
    vault_account_id: StrictStr = Field(..., alias="vaultAccountId")
    ownership_start_time: StrictFloat = Field(..., alias="ownershipStartTime")
    ownership_last_update_time: StrictFloat = Field(..., alias="ownershipLastUpdateTime")
    blockchain_descriptor: StrictStr = Field(..., alias="blockchainDescriptor")
    description: StrictStr = ...
    name: StrictStr = ...
    __properties = ["id", "tokenId", "standard", "metadataURI", "cachedMetadataURI", "media", "collection", "balance", "vaultAccountId", "ownershipStartTime", "ownershipLastUpdateTime", "blockchainDescriptor", "description", "name"]

    @validator('blockchain_descriptor')
    def blockchain_descriptor_validate_enum(cls, v):
        if v not in ('ETH', 'ETH_TEST3', 'POLYGON', 'POLYGON_TEST_MUMBAI'):
            raise ValueError("must be one of enum values ('ETH', 'ETH_TEST3', 'POLYGON', 'POLYGON_TEST_MUMBAI')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TokenOwnershipResponse:
        """Create an instance of TokenOwnershipResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in media (list)
        _items = []
        if self.media:
            for _item in self.media:
                if _item:
                    _items.append(_item.to_dict())
            _dict['media'] = _items
        # override the default output from pydantic by calling `to_dict()` of collection
        if self.collection:
            _dict['collection'] = self.collection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TokenOwnershipResponse:
        """Create an instance of TokenOwnershipResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TokenOwnershipResponse.parse_obj(obj)

        _obj = TokenOwnershipResponse.parse_obj({
            "id": obj.get("id"),
            "token_id": obj.get("tokenId"),
            "standard": obj.get("standard"),
            "metadata_uri": obj.get("metadataURI"),
            "cached_metadata_uri": obj.get("cachedMetadataURI"),
            "media": [MediaEntityResponse.from_dict(_item) for _item in obj.get("media")] if obj.get("media") is not None else None,
            "collection": TokenResponseCollection.from_dict(obj.get("collection")) if obj.get("collection") is not None else None,
            "balance": obj.get("balance"),
            "vault_account_id": obj.get("vaultAccountId"),
            "ownership_start_time": obj.get("ownershipStartTime"),
            "ownership_last_update_time": obj.get("ownershipLastUpdateTime"),
            "blockchain_descriptor": obj.get("blockchainDescriptor"),
            "description": obj.get("description"),
            "name": obj.get("name")
        })
        return _obj

