# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictFloat, StrictStr, validator

class Transaction(BaseModel):
    """
    Transaction
    """
    id: StrictStr = ...
    state: StrictStr = ...
    timestamp: Optional[StrictFloat] = None
    instruction_id: Optional[StrictStr] = Field(None, alias="instructionId")
    __properties = ["id", "state", "timestamp", "instructionId"]

    @validator('state')
    def state_validate_enum(cls, v):
        if v not in ('SUBMITTED', 'QUEUED', 'PENDING_AUTHORIZATION', 'PENDING_SIGNATURE', 'BROADCASTING', 'PENDING_3RD_PARTY_MANUAL_APPROVAL', 'PENDING_3RD_PARTY', 'PENDING', 'CONFIRMING', 'CONFIRMED', 'COMPLETED', 'PARTIALLY_COMPLETED', 'PENDING_AML_SCREENING', 'CANCELLING', 'CANCELLED', 'REJECTED', 'BLOCKED', 'FAILED', 'TIMEOUT'):
            raise ValueError("must be one of enum values ('SUBMITTED', 'QUEUED', 'PENDING_AUTHORIZATION', 'PENDING_SIGNATURE', 'BROADCASTING', 'PENDING_3RD_PARTY_MANUAL_APPROVAL', 'PENDING_3RD_PARTY', 'PENDING', 'CONFIRMING', 'CONFIRMED', 'COMPLETED', 'PARTIALLY_COMPLETED', 'PENDING_AML_SCREENING', 'CANCELLING', 'CANCELLED', 'REJECTED', 'BLOCKED', 'FAILED', 'TIMEOUT')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Transaction:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Transaction:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Transaction.parse_obj(obj)

        _obj = Transaction.parse_obj({
            "id": obj.get("id"),
            "state": obj.get("state"),
            "timestamp": obj.get("timestamp"),
            "instruction_id": obj.get("instructionId")
        })
        return _obj

