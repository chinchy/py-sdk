# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from fireblocks_client.models.travel_rule_issuer import TravelRuleIssuer

class TravelRuleIssuers(BaseModel):
    """
    TravelRuleIssuers
    """
    year_founded: TravelRuleIssuer = Field(..., alias="yearFounded")
    is_regulated: TravelRuleIssuer = Field(..., alias="isRegulated")
    regulatory_authorities: TravelRuleIssuer = Field(..., alias="regulatoryAuthorities")
    name: TravelRuleIssuer = ...
    logo: TravelRuleIssuer = ...
    website: TravelRuleIssuer = ...
    legal_name: TravelRuleIssuer = Field(..., alias="legalName")
    legal_structure: TravelRuleIssuer = Field(..., alias="legalStructure")
    incorporation_country: TravelRuleIssuer = Field(..., alias="incorporationCountry")
    business_number: TravelRuleIssuer = Field(..., alias="businessNumber")
    address_line1: TravelRuleIssuer = Field(..., alias="addressLine1")
    city: TravelRuleIssuer = ...
    country: TravelRuleIssuer = ...
    description: TravelRuleIssuer = ...
    __properties = ["yearFounded", "isRegulated", "regulatoryAuthorities", "name", "logo", "website", "legalName", "legalStructure", "incorporationCountry", "businessNumber", "addressLine1", "city", "country", "description"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TravelRuleIssuers:
        """Create an instance of TravelRuleIssuers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of year_founded
        if self.year_founded:
            _dict['yearFounded'] = self.year_founded.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_regulated
        if self.is_regulated:
            _dict['isRegulated'] = self.is_regulated.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regulatory_authorities
        if self.regulatory_authorities:
            _dict['regulatoryAuthorities'] = self.regulatory_authorities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of website
        if self.website:
            _dict['website'] = self.website.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legal_name
        if self.legal_name:
            _dict['legalName'] = self.legal_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legal_structure
        if self.legal_structure:
            _dict['legalStructure'] = self.legal_structure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incorporation_country
        if self.incorporation_country:
            _dict['incorporationCountry'] = self.incorporation_country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business_number
        if self.business_number:
            _dict['businessNumber'] = self.business_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address_line1
        if self.address_line1:
            _dict['addressLine1'] = self.address_line1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of city
        if self.city:
            _dict['city'] = self.city.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TravelRuleIssuers:
        """Create an instance of TravelRuleIssuers from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TravelRuleIssuers.parse_obj(obj)

        _obj = TravelRuleIssuers.parse_obj({
            "year_founded": TravelRuleIssuer.from_dict(obj.get("yearFounded")) if obj.get("yearFounded") is not None else None,
            "is_regulated": TravelRuleIssuer.from_dict(obj.get("isRegulated")) if obj.get("isRegulated") is not None else None,
            "regulatory_authorities": TravelRuleIssuer.from_dict(obj.get("regulatoryAuthorities")) if obj.get("regulatoryAuthorities") is not None else None,
            "name": TravelRuleIssuer.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "logo": TravelRuleIssuer.from_dict(obj.get("logo")) if obj.get("logo") is not None else None,
            "website": TravelRuleIssuer.from_dict(obj.get("website")) if obj.get("website") is not None else None,
            "legal_name": TravelRuleIssuer.from_dict(obj.get("legalName")) if obj.get("legalName") is not None else None,
            "legal_structure": TravelRuleIssuer.from_dict(obj.get("legalStructure")) if obj.get("legalStructure") is not None else None,
            "incorporation_country": TravelRuleIssuer.from_dict(obj.get("incorporationCountry")) if obj.get("incorporationCountry") is not None else None,
            "business_number": TravelRuleIssuer.from_dict(obj.get("businessNumber")) if obj.get("businessNumber") is not None else None,
            "address_line1": TravelRuleIssuer.from_dict(obj.get("addressLine1")) if obj.get("addressLine1") is not None else None,
            "city": TravelRuleIssuer.from_dict(obj.get("city")) if obj.get("city") is not None else None,
            "country": TravelRuleIssuer.from_dict(obj.get("country")) if obj.get("country") is not None else None,
            "description": TravelRuleIssuer.from_dict(obj.get("description")) if obj.get("description") is not None else None
        })
        return _obj

