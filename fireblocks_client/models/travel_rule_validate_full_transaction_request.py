# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr
from fireblocks_client.models.travel_rule_validate_full_transaction_request_beneficiary import TravelRuleValidateFullTransactionRequestBeneficiary
from fireblocks_client.models.travel_rule_validate_full_transaction_request_beneficiary_proof import TravelRuleValidateFullTransactionRequestBeneficiaryProof
from fireblocks_client.models.travel_rule_validate_full_transaction_request_originator import TravelRuleValidateFullTransactionRequestOriginator
from fireblocks_client.models.travel_rule_validate_full_transaction_request_originator_proof import TravelRuleValidateFullTransactionRequestOriginatorProof
from fireblocks_client.models.travel_rule_validate_full_transaction_request_pii import TravelRuleValidateFullTransactionRequestPii
from fireblocks_client.models.travel_rule_validate_full_transaction_request_transaction_blockchain_info import TravelRuleValidateFullTransactionRequestTransactionBlockchainInfo

class TravelRuleValidateFullTransactionRequest(BaseModel):
    """
    TravelRuleValidateFullTransactionRequest
    """
    transaction_asset: StrictStr = Field(..., alias="transactionAsset", description="The asset involved in the transaction")
    transaction_amount: StrictStr = Field(..., alias="transactionAmount", description="The amount of the transaction")
    originator_did: StrictStr = Field(..., alias="originatorDid", description="The DID of the transaction originator")
    beneficiary_did: StrictStr = Field(..., alias="beneficiaryDid", description="The DID of the transaction beneficiary")
    originator_vas_pdid: StrictStr = Field(..., alias="originatorVASPdid", description="The VASP ID of the transaction originator")
    beneficiary_vas_pdid: StrictStr = Field(..., alias="beneficiaryVASPdid", description="The VASP ID of the transaction beneficiary")
    beneficiary_vas_pname: StrictStr = Field(..., alias="beneficiaryVASPname", description="The name of the VASP acting as the beneficiary")
    transaction_blockchain_info: TravelRuleValidateFullTransactionRequestTransactionBlockchainInfo = Field(..., alias="transactionBlockchainInfo")
    originator: TravelRuleValidateFullTransactionRequestOriginator = ...
    beneficiary: TravelRuleValidateFullTransactionRequestBeneficiary = ...
    encrypted: StrictStr = Field(..., description="Encrypted data related to the transaction")
    protocol: StrictStr = Field(..., description="The protocol used to perform the travel rule")
    notification_email: StrictStr = Field(..., alias="notificationEmail", description="The email address where a notification should be sent upon completion of the travel rule")
    skip_beneficiary_data_validation: StrictBool = Field(..., alias="skipBeneficiaryDataValidation", description="Whether to skip validation of beneficiary data")
    travel_rule_behavior: StrictBool = Field(..., alias="travelRuleBehavior", description="Whether to check if the transaction is a TRAVEL_RULE in the beneficiary VASP's jurisdiction")
    originator_proof: TravelRuleValidateFullTransactionRequestOriginatorProof = Field(..., alias="originatorProof")
    beneficiary_proof: TravelRuleValidateFullTransactionRequestBeneficiaryProof = Field(..., alias="beneficiaryProof")
    pii: TravelRuleValidateFullTransactionRequestPii = ...
    __properties = ["transactionAsset", "transactionAmount", "originatorDid", "beneficiaryDid", "originatorVASPdid", "beneficiaryVASPdid", "beneficiaryVASPname", "transactionBlockchainInfo", "originator", "beneficiary", "encrypted", "protocol", "notificationEmail", "skipBeneficiaryDataValidation", "travelRuleBehavior", "originatorProof", "beneficiaryProof", "pii"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TravelRuleValidateFullTransactionRequest:
        """Create an instance of TravelRuleValidateFullTransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of transaction_blockchain_info
        if self.transaction_blockchain_info:
            _dict['transactionBlockchainInfo'] = self.transaction_blockchain_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originator
        if self.originator:
            _dict['originator'] = self.originator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beneficiary
        if self.beneficiary:
            _dict['beneficiary'] = self.beneficiary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originator_proof
        if self.originator_proof:
            _dict['originatorProof'] = self.originator_proof.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beneficiary_proof
        if self.beneficiary_proof:
            _dict['beneficiaryProof'] = self.beneficiary_proof.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pii
        if self.pii:
            _dict['pii'] = self.pii.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TravelRuleValidateFullTransactionRequest:
        """Create an instance of TravelRuleValidateFullTransactionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TravelRuleValidateFullTransactionRequest.parse_obj(obj)

        _obj = TravelRuleValidateFullTransactionRequest.parse_obj({
            "transaction_asset": obj.get("transactionAsset"),
            "transaction_amount": obj.get("transactionAmount"),
            "originator_did": obj.get("originatorDid"),
            "beneficiary_did": obj.get("beneficiaryDid"),
            "originator_vas_pdid": obj.get("originatorVASPdid"),
            "beneficiary_vas_pdid": obj.get("beneficiaryVASPdid"),
            "beneficiary_vas_pname": obj.get("beneficiaryVASPname"),
            "transaction_blockchain_info": TravelRuleValidateFullTransactionRequestTransactionBlockchainInfo.from_dict(obj.get("transactionBlockchainInfo")) if obj.get("transactionBlockchainInfo") is not None else None,
            "originator": TravelRuleValidateFullTransactionRequestOriginator.from_dict(obj.get("originator")) if obj.get("originator") is not None else None,
            "beneficiary": TravelRuleValidateFullTransactionRequestBeneficiary.from_dict(obj.get("beneficiary")) if obj.get("beneficiary") is not None else None,
            "encrypted": obj.get("encrypted"),
            "protocol": obj.get("protocol"),
            "notification_email": obj.get("notificationEmail"),
            "skip_beneficiary_data_validation": obj.get("skipBeneficiaryDataValidation"),
            "travel_rule_behavior": obj.get("travelRuleBehavior"),
            "originator_proof": TravelRuleValidateFullTransactionRequestOriginatorProof.from_dict(obj.get("originatorProof")) if obj.get("originatorProof") is not None else None,
            "beneficiary_proof": TravelRuleValidateFullTransactionRequestBeneficiaryProof.from_dict(obj.get("beneficiaryProof")) if obj.get("beneficiaryProof") is not None else None,
            "pii": TravelRuleValidateFullTransactionRequestPii.from_dict(obj.get("pii")) if obj.get("pii") is not None else None
        })
        return _obj

