# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr
from fireblocks_client.models.travel_rule_validate_transaction_request_beneficiary_address import TravelRuleValidateTransactionRequestBeneficiaryAddress

class TravelRuleValidateTransactionRequest(BaseModel):
    """
    TravelRuleValidateTransactionRequest
    """
    transaction_asset: StrictStr = Field(..., alias="transactionAsset", description="Transaction asset symbol BTC,ETH)")
    destination: StrictStr = Field(..., description="Transaction destination address")
    transaction_amount: StrictStr = Field(..., alias="transactionAmount", description="Transaction amount in the transaction asset")
    originator_vas_pdid: StrictStr = Field(..., alias="originatorVASPdid", description="This is the identifier assigned to your VASP")
    originator_equals_beneficiary: StrictBool = Field(..., alias="originatorEqualsBeneficiary", description="\"True\" if the originator and beneficiary is the same person and you therefore do not need to collect any information. \"False\" if it is a third-party transfer.")
    travel_rule_behavior: StrictBool = Field(..., alias="travelRuleBehavior", description="This will also check if the transaction is a TRAVEL_RULE in the beneficiary VASP's jurisdiction")
    beneficiary_vas_pdid: StrictStr = Field(..., alias="beneficiaryVASPdid", description="This is the identifier assigned to the VASP the funds are being sent to")
    beneficiary_vas_pname: StrictStr = Field(..., alias="beneficiaryVASPname", description="Beneficiary VASP name")
    beneficiary_name: StrictStr = Field(..., alias="beneficiaryName", description="Beneficiary  name")
    beneficiary_account_number: StrictStr = Field(..., alias="beneficiaryAccountNumber", description="Beneficiary  name")
    beneficiary_address: TravelRuleValidateTransactionRequestBeneficiaryAddress = Field(..., alias="beneficiaryAddress")
    __properties = ["transactionAsset", "destination", "transactionAmount", "originatorVASPdid", "originatorEqualsBeneficiary", "travelRuleBehavior", "beneficiaryVASPdid", "beneficiaryVASPname", "beneficiaryName", "beneficiaryAccountNumber", "beneficiaryAddress"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TravelRuleValidateTransactionRequest:
        """Create an instance of TravelRuleValidateTransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of beneficiary_address
        if self.beneficiary_address:
            _dict['beneficiaryAddress'] = self.beneficiary_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TravelRuleValidateTransactionRequest:
        """Create an instance of TravelRuleValidateTransactionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TravelRuleValidateTransactionRequest.parse_obj(obj)

        _obj = TravelRuleValidateTransactionRequest.parse_obj({
            "transaction_asset": obj.get("transactionAsset"),
            "destination": obj.get("destination"),
            "transaction_amount": obj.get("transactionAmount"),
            "originator_vas_pdid": obj.get("originatorVASPdid"),
            "originator_equals_beneficiary": obj.get("originatorEqualsBeneficiary"),
            "travel_rule_behavior": obj.get("travelRuleBehavior"),
            "beneficiary_vas_pdid": obj.get("beneficiaryVASPdid"),
            "beneficiary_vas_pname": obj.get("beneficiaryVASPname"),
            "beneficiary_name": obj.get("beneficiaryName"),
            "beneficiary_account_number": obj.get("beneficiaryAccountNumber"),
            "beneficiary_address": TravelRuleValidateTransactionRequestBeneficiaryAddress.from_dict(obj.get("beneficiaryAddress")) if obj.get("beneficiaryAddress") is not None else None
        })
        return _obj

