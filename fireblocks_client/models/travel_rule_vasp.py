# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr
from fireblocks_client.models.travel_rule_issuers import TravelRuleIssuers

class TravelRuleVASP(BaseModel):
    """
    TravelRuleVASP
    """
    did: StrictStr = ...
    name: StrictStr = ...
    verification_status: StrictStr = Field(..., alias="verificationStatus")
    address_line1: StrictStr = Field(..., alias="addressLine1")
    address_line2: StrictStr = Field(..., alias="addressLine2")
    city: StrictStr = ...
    country: StrictStr = ...
    email_domains: StrictStr = Field(..., alias="emailDomains")
    website: StrictStr = ...
    logo: StrictStr = ...
    legal_structure: StrictStr = Field(..., alias="legalStructure")
    legal_name: StrictStr = Field(..., alias="legalName")
    year_founded: StrictStr = Field(..., alias="yearFounded")
    incorporation_country: StrictStr = Field(..., alias="incorporationCountry")
    is_regulated: StrictStr = Field(..., alias="isRegulated")
    other_names: StrictStr = Field(..., alias="otherNames")
    identification_type: StrictStr = Field(..., alias="identificationType")
    identification_country: StrictStr = Field(..., alias="identificationCountry")
    business_number: StrictStr = Field(..., alias="businessNumber")
    regulatory_authorities: StrictStr = Field(..., alias="regulatoryAuthorities")
    jurisdictions: StrictStr = ...
    street: StrictStr = ...
    number: StrictStr = ...
    unit: StrictStr = ...
    post_code: StrictStr = Field(..., alias="postCode")
    state: StrictStr = ...
    certificates: StrictStr = ...
    description: StrictStr = ...
    travel_rule_openvasp: StrictStr = Field(..., alias="travelRule_OPENVASP")
    travel_rule_sygna: StrictStr = Field(..., alias="travelRule_SYGNA")
    travel_rule_trisa: StrictStr = Field(..., alias="travelRule_TRISA")
    travel_rule_trlight: StrictStr = Field(..., alias="travelRule_TRLIGHT")
    travel_rule_email: StrictStr = Field(..., alias="travelRule_EMAIL")
    travel_rule_trp: StrictStr = Field(..., alias="travelRule_TRP")
    travel_rule_shyft: StrictStr = Field(..., alias="travelRule_SHYFT")
    travel_rule_ustravelrulewg: StrictStr = Field(..., alias="travelRule_USTRAVELRULEWG")
    created_at: StrictStr = Field(..., alias="createdAt")
    created_by: StrictStr = Field(..., alias="createdBy")
    updated_at: StrictStr = Field(..., alias="updatedAt")
    updated_by: StrictStr = Field(..., alias="updatedBy")
    last_sent_date: StrictStr = Field(..., alias="lastSentDate")
    last_received_date: StrictStr = Field(..., alias="lastReceivedDate")
    documents: StrictStr = ...
    has_admin: StrictBool = Field(..., alias="hasAdmin")
    is_notifiable: StrictBool = Field(..., alias="isNotifiable")
    issuers: TravelRuleIssuers = ...
    __properties = ["did", "name", "verificationStatus", "addressLine1", "addressLine2", "city", "country", "emailDomains", "website", "logo", "legalStructure", "legalName", "yearFounded", "incorporationCountry", "isRegulated", "otherNames", "identificationType", "identificationCountry", "businessNumber", "regulatoryAuthorities", "jurisdictions", "street", "number", "unit", "postCode", "state", "certificates", "description", "travelRule_OPENVASP", "travelRule_SYGNA", "travelRule_TRISA", "travelRule_TRLIGHT", "travelRule_EMAIL", "travelRule_TRP", "travelRule_SHYFT", "travelRule_USTRAVELRULEWG", "createdAt", "createdBy", "updatedAt", "updatedBy", "lastSentDate", "lastReceivedDate", "documents", "hasAdmin", "isNotifiable", "issuers"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TravelRuleVASP:
        """Create an instance of TravelRuleVASP from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of issuers
        if self.issuers:
            _dict['issuers'] = self.issuers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TravelRuleVASP:
        """Create an instance of TravelRuleVASP from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TravelRuleVASP.parse_obj(obj)

        _obj = TravelRuleVASP.parse_obj({
            "did": obj.get("did"),
            "name": obj.get("name"),
            "verification_status": obj.get("verificationStatus"),
            "address_line1": obj.get("addressLine1"),
            "address_line2": obj.get("addressLine2"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "email_domains": obj.get("emailDomains"),
            "website": obj.get("website"),
            "logo": obj.get("logo"),
            "legal_structure": obj.get("legalStructure"),
            "legal_name": obj.get("legalName"),
            "year_founded": obj.get("yearFounded"),
            "incorporation_country": obj.get("incorporationCountry"),
            "is_regulated": obj.get("isRegulated"),
            "other_names": obj.get("otherNames"),
            "identification_type": obj.get("identificationType"),
            "identification_country": obj.get("identificationCountry"),
            "business_number": obj.get("businessNumber"),
            "regulatory_authorities": obj.get("regulatoryAuthorities"),
            "jurisdictions": obj.get("jurisdictions"),
            "street": obj.get("street"),
            "number": obj.get("number"),
            "unit": obj.get("unit"),
            "post_code": obj.get("postCode"),
            "state": obj.get("state"),
            "certificates": obj.get("certificates"),
            "description": obj.get("description"),
            "travel_rule_openvasp": obj.get("travelRule_OPENVASP"),
            "travel_rule_sygna": obj.get("travelRule_SYGNA"),
            "travel_rule_trisa": obj.get("travelRule_TRISA"),
            "travel_rule_trlight": obj.get("travelRule_TRLIGHT"),
            "travel_rule_email": obj.get("travelRule_EMAIL"),
            "travel_rule_trp": obj.get("travelRule_TRP"),
            "travel_rule_shyft": obj.get("travelRule_SHYFT"),
            "travel_rule_ustravelrulewg": obj.get("travelRule_USTRAVELRULEWG"),
            "created_at": obj.get("createdAt"),
            "created_by": obj.get("createdBy"),
            "updated_at": obj.get("updatedAt"),
            "updated_by": obj.get("updatedBy"),
            "last_sent_date": obj.get("lastSentDate"),
            "last_received_date": obj.get("lastReceivedDate"),
            "documents": obj.get("documents"),
            "has_admin": obj.get("hasAdmin"),
            "is_notifiable": obj.get("isNotifiable"),
            "issuers": TravelRuleIssuers.from_dict(obj.get("issuers")) if obj.get("issuers") is not None else None
        })
        return _obj

