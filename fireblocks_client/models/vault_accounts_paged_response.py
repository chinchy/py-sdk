# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from fireblocks_client.models.vault_account import VaultAccount
from fireblocks_client.models.vault_accounts_paged_response_paging import VaultAccountsPagedResponsePaging

class VaultAccountsPagedResponse(BaseModel):
    """
    VaultAccountsPagedResponse
    """
    accounts: Optional[conlist(VaultAccount)] = None
    paging: Optional[VaultAccountsPagedResponsePaging] = None
    previous_url: Optional[StrictStr] = Field(None, alias="previousUrl")
    next_url: Optional[StrictStr] = Field(None, alias="nextUrl")
    __properties = ["accounts", "paging", "previousUrl", "nextUrl"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VaultAccountsPagedResponse:
        """Create an instance of VaultAccountsPagedResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of paging
        if self.paging:
            _dict['paging'] = self.paging.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VaultAccountsPagedResponse:
        """Create an instance of VaultAccountsPagedResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VaultAccountsPagedResponse.parse_obj(obj)

        _obj = VaultAccountsPagedResponse.parse_obj({
            "accounts": [VaultAccount.from_dict(_item) for _item in obj.get("accounts")] if obj.get("accounts") is not None else None,
            "paging": VaultAccountsPagedResponsePaging.from_dict(obj.get("paging")) if obj.get("paging") is not None else None,
            "previous_url": obj.get("previousUrl"),
            "next_url": obj.get("nextUrl")
        })
        return _obj

