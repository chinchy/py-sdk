# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictFloat, StrictStr
from fireblocks_client.models.rewards_info import RewardsInfo

class VaultAsset(BaseModel):
    """
    VaultAsset
    """
    id: Optional[StrictStr] = None
    total: Optional[StrictStr] = Field(None, description="The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.")
    balance: Optional[StrictStr] = Field(None, description="Deprecated - replaced by \"total\"")
    available: Optional[StrictStr] = Field(None, description="Funds available for transfer. Equals the blockchain balance minus any locked amounts")
    pending: Optional[StrictStr] = Field(None, description="The cumulative balance of all transactions pending to be cleared")
    frozen: Optional[StrictStr] = Field(None, description="The cumulative frozen balance")
    locked_amount: Optional[StrictStr] = Field(None, alias="lockedAmount", description="Funds in outgoing transactions that are not yet published to the network")
    staked: Optional[StrictStr] = Field(None, description="Staked balance")
    total_staked_cpu: Optional[StrictFloat] = Field(None, alias="totalStakedCPU", description="Deprecated")
    total_staked_network: Optional[StrictStr] = Field(None, alias="totalStakedNetwork", description="Deprecated")
    self_staked_cpu: Optional[StrictStr] = Field(None, alias="selfStakedCPU", description="Deprecated")
    self_staked_network: Optional[StrictStr] = Field(None, alias="selfStakedNetwork", description="Deprecated")
    pending_refund_cpu: Optional[StrictStr] = Field(None, alias="pendingRefundCPU", description="Deprecated")
    pending_refund_network: Optional[StrictStr] = Field(None, alias="pendingRefundNetwork", description="Deprecated")
    block_height: Optional[StrictStr] = Field(None, alias="blockHeight")
    block_hash: Optional[StrictStr] = Field(None, alias="blockHash")
    rewards_info: Optional[RewardsInfo] = Field(None, alias="rewardsInfo")
    __properties = ["id", "total", "balance", "available", "pending", "frozen", "lockedAmount", "staked", "totalStakedCPU", "totalStakedNetwork", "selfStakedCPU", "selfStakedNetwork", "pendingRefundCPU", "pendingRefundNetwork", "blockHeight", "blockHash", "rewardsInfo"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VaultAsset:
        """Create an instance of VaultAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of rewards_info
        if self.rewards_info:
            _dict['rewardsInfo'] = self.rewards_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VaultAsset:
        """Create an instance of VaultAsset from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VaultAsset.parse_obj(obj)

        _obj = VaultAsset.parse_obj({
            "id": obj.get("id"),
            "total": obj.get("total"),
            "balance": obj.get("balance"),
            "available": obj.get("available"),
            "pending": obj.get("pending"),
            "frozen": obj.get("frozen"),
            "locked_amount": obj.get("lockedAmount"),
            "staked": obj.get("staked"),
            "total_staked_cpu": obj.get("totalStakedCPU"),
            "total_staked_network": obj.get("totalStakedNetwork"),
            "self_staked_cpu": obj.get("selfStakedCPU"),
            "self_staked_network": obj.get("selfStakedNetwork"),
            "pending_refund_cpu": obj.get("pendingRefundCPU"),
            "pending_refund_network": obj.get("pendingRefundNetwork"),
            "block_height": obj.get("blockHeight"),
            "block_hash": obj.get("blockHash"),
            "rewards_info": RewardsInfo.from_dict(obj.get("rewardsInfo")) if obj.get("rewardsInfo") is not None else None
        })
        return _obj

