# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator

class VaultWalletAddress(BaseModel):
    """
    VaultWalletAddress
    """
    asset_id: Optional[StrictStr] = Field(None, alias="assetId")
    address: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    tag: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    customer_ref_id: Optional[StrictStr] = Field(None, alias="customerRefId")
    address_format: Optional[StrictStr] = Field(None, alias="addressFormat")
    legacy_address: Optional[StrictStr] = Field(None, alias="legacyAddress")
    enterprise_address: Optional[StrictStr] = Field(None, alias="enterpriseAddress")
    bip44_address_index: Optional[StrictInt] = Field(None, alias="bip44AddressIndex")
    user_defined: Optional[StrictBool] = Field(None, alias="userDefined")
    __properties = ["assetId", "address", "description", "tag", "type", "customerRefId", "addressFormat", "legacyAddress", "enterpriseAddress", "bip44AddressIndex", "userDefined"]

    @validator('address_format')
    def address_format_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('SEGWIT', 'LEGACY'):
            raise ValueError("must be one of enum values ('SEGWIT', 'LEGACY')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VaultWalletAddress:
        """Create an instance of VaultWalletAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VaultWalletAddress:
        """Create an instance of VaultWalletAddress from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VaultWalletAddress.parse_obj(obj)

        _obj = VaultWalletAddress.parse_obj({
            "asset_id": obj.get("assetId"),
            "address": obj.get("address"),
            "description": obj.get("description"),
            "tag": obj.get("tag"),
            "type": obj.get("type"),
            "customer_ref_id": obj.get("customerRefId"),
            "address_format": obj.get("addressFormat"),
            "legacy_address": obj.get("legacyAddress"),
            "enterprise_address": obj.get("enterpriseAddress"),
            "bip44_address_index": obj.get("bip44AddressIndex"),
            "user_defined": obj.get("userDefined")
        })
        return _obj

