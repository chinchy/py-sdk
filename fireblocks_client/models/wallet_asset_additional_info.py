# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class WalletAssetAdditionalInfo(BaseModel):
    """
    WalletAssetAdditionalInfo
    """
    account_holder_given_name: Optional[StrictStr] = Field(None, alias="accountHolderGivenName")
    account_holder_surname: Optional[StrictStr] = Field(None, alias="accountHolderSurname")
    account_holder_city: Optional[StrictStr] = Field(None, alias="accountHolderCity")
    account_holder_country: Optional[StrictStr] = Field(None, alias="accountHolderCountry")
    account_holder_address1: Optional[StrictStr] = Field(None, alias="accountHolderAddress1")
    account_holder_address2: Optional[StrictStr] = Field(None, alias="accountHolderAddress2")
    account_holder_district: Optional[StrictStr] = Field(None, alias="accountHolderDistrict")
    account_holder_postal_code: Optional[StrictStr] = Field(None, alias="accountHolderPostalCode")
    aba_routing_number: Optional[StrictStr] = Field(None, alias="abaRoutingNumber")
    aba_account_number: Optional[StrictStr] = Field(None, alias="abaAccountNumber")
    aba_country: Optional[StrictStr] = Field(None, alias="abaCountry")
    iban: Optional[StrictStr] = None
    iban_city: Optional[StrictStr] = Field(None, alias="ibanCity")
    iban_country: Optional[StrictStr] = Field(None, alias="ibanCountry")
    spei_clabe: Optional[StrictStr] = Field(None, alias="speiClabe")
    spei_name: Optional[StrictStr] = Field(None, alias="speiName")
    __properties = ["accountHolderGivenName", "accountHolderSurname", "accountHolderCity", "accountHolderCountry", "accountHolderAddress1", "accountHolderAddress2", "accountHolderDistrict", "accountHolderPostalCode", "abaRoutingNumber", "abaAccountNumber", "abaCountry", "iban", "ibanCity", "ibanCountry", "speiClabe", "speiName"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WalletAssetAdditionalInfo:
        """Create an instance of WalletAssetAdditionalInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WalletAssetAdditionalInfo:
        """Create an instance of WalletAssetAdditionalInfo from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return WalletAssetAdditionalInfo.parse_obj(obj)

        _obj = WalletAssetAdditionalInfo.parse_obj({
            "account_holder_given_name": obj.get("accountHolderGivenName"),
            "account_holder_surname": obj.get("accountHolderSurname"),
            "account_holder_city": obj.get("accountHolderCity"),
            "account_holder_country": obj.get("accountHolderCountry"),
            "account_holder_address1": obj.get("accountHolderAddress1"),
            "account_holder_address2": obj.get("accountHolderAddress2"),
            "account_holder_district": obj.get("accountHolderDistrict"),
            "account_holder_postal_code": obj.get("accountHolderPostalCode"),
            "aba_routing_number": obj.get("abaRoutingNumber"),
            "aba_account_number": obj.get("abaAccountNumber"),
            "aba_country": obj.get("abaCountry"),
            "iban": obj.get("iban"),
            "iban_city": obj.get("ibanCity"),
            "iban_country": obj.get("ibanCountry"),
            "spei_clabe": obj.get("speiClabe"),
            "spei_name": obj.get("speiName")
        })
        return _obj

